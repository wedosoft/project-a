{
  "tasks": [
    {
      "id": 1,
      "title": "FastAPI 프로젝트 초기 설정",
      "description": "FastAPI 백엔드 프로젝트 초기 설정 및 PRD/가이드라인 기반 핵심 구조(폴더, 로깅, 환경변수) 정의",
      "status": "completed",
      "dependencies": [],
      "priority": "high",
      "details": "Python 3.10 환경에서 FastAPI 프레임워크 기반 프로젝트 구조 설정. 필요한 패키지: fastapi, uvicorn[standard], pydantic 등 핵심 패키지 설치 (requirements.txt에 버전 명시 필수). PRD에 명시된 백엔드 폴더 구조 (backend/api/, backend/core/, backend/freshdesk/, backend/data/, backend/docs/) 생성 및 기본 __init__.py 파일 포함. backend/core/는 주요 비즈니스 로직(Context Builder, Retriever, LLM Orchestrator, Response Assembler 등 추상적 모듈 포함)을 담도록 설계. Docker (Dockerfile, docker-compose.yml) 설정: Python 3.10 환경, 명시적 버전 사용. 환경변수 관리: .env 및 .env.example 파일 생성 및 기본 설정 항목 정의 (예: FRESHDESK_DOMAIN, QDRANT_URL 등). 로깅 설정: 구조화된 JSON 로깅 기본 설정. 한글 주석 및 문서화 원칙 프로젝트 전반에 적용되도록 초기 가이드라인 설정.",
      "testStrategy": "프로젝트 구조 및 PRD 명시 폴더 구조 일치 여부 검증. requirements.txt 기반 의존성 설치 및 버전 확인. Docker 컨테이너 빌드 및 실행, 기본 FastAPI 서버 동작 테스트. 환경변수 로딩 테스트. 초기 JSON 형식 로깅 설정 검증.",
      "subtasks": [
        {
          "id": "1.1",
          "title": "Python 패키지 설치 및 requirements.txt 생성",
          "description": "필요한 Python 패키지 설치 및 버전 명시된 requirements.txt 파일 생성",
          "status": "pending"
        },
        {
          "id": "1.2",
          "title": "PRD 기반 폴더 구조 생성",
          "description": "backend/api/, backend/core/, backend/freshdesk/, backend/data/, backend/docs/ 폴더 생성 및 기본 __init__.py 파일 포함",
          "status": "pending"
        },
        {
          "id": "1.3",
          "title": "Docker 설정 파일 생성",
          "description": "Python 3.10 기반 Dockerfile 및 docker-compose.yml 파일 생성, 명시적 버전 사용",
          "status": "pending"
        },
        {
          "id": "1.4",
          "title": "환경변수 관리 설정",
          "description": ".env 및 .env.example 파일 생성, 기본 설정 항목(FRESHDESK_DOMAIN, QDRANT_URL 등) 정의",
          "status": "pending"
        },
        {
          "id": "1.5",
          "title": "로깅 시스템 설정",
          "description": "구조화된 JSON 로깅 기본 설정 구현",
          "status": "pending"
        },
        {
          "id": "1.6",
          "title": "한글 주석 및 문서화 가이드라인 설정",
          "description": "프로젝트 전반에 적용될 한글 주석 및 문서화 원칙 가이드라인 작성",
          "status": "pending"
        },
        {
          "id": "1.7",
          "title": "기본 FastAPI 앱 설정",
          "description": "기본 FastAPI 애플리케이션 설정 및 헬스체크 엔드포인트 구현",
          "status": "pending"
        }
      ]
    },
    {
      "id": 2,
      "title": "Qdrant Cloud 연동 및 벡터 DB 설정",
      "description": "Qdrant Cloud 연동, `company_id` 기반 멀티테넌트 데이터 격리를 위한 컬렉션 구조 설계 및 핵심 CRUD 기능 구현. PRD 및 가이드라인 준수.",
      "status": "completed",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "- `qdrant-client` 패키지 설치 (`requirements.txt`에 버전 명시, 예: `qdrant-client==1.7.0`).\n- Qdrant Cloud 연결 설정 (`QDRANT_URL`, `QDRANT_API_KEY` 환경변수 사용).\n- **멀티테넌시 전략**: `company_id`를 각 포인트의 페이로드(payload)에 메타데이터 필드로 포함하여 논리적 데이터 분리. 컬렉션 이름은 `tickets`, `solutions`, `attachments_metadata` 등으로 단순화하고, 검색 시 `company_id` 필터링 필수 적용.\n- **컬렉션 정의**:\n  - `tickets`: 티켓 내용 임베딩 및 메타데이터 저장.\n  - `solutions`: 솔루션/KB 문서 내용 임베딩 및 메타데이터 저장.\n  - `attachments_metadata`: (필요시) 첨부파일 텍스트 내용 임베딩 및 메타데이터 저장.\n- **벡터 설정**: OpenAI `text-embedding-3-small` 모델 기준 벡터 차원 (1536) 설정 및 거리 함수 (예: Cosine) 지정.\n- **메타데이터 필드**: PRD 기반 필드(ticket_id, document_id, creation_date, status, category, file_name, file_type, company_id 등) 정의 및 인덱싱 설정.\n- **핵심 기능 구현 (`core/vectordb.py` 또는 `data/qdrant_handler.py` 모듈 내):**\n  - Qdrant 클라이언트 초기화 함수.\n  - 필요한 컬렉션 자동 생성 (존재하지 않을 경우) 함수.\n  - 데이터 삽입/업데이트 (upsert_points) 함수 (배치 처리 포함).\n  - ID 기반 데이터 조회 (get_point) 함수.\n  - 유사도 검색 (search_points) 함수: `company_id` 필터링 필수, 추가 메타데이터 필터링 옵션 제공.\n- **에러 처리**: Qdrant 연결 오류, API 요청 실패 등에 대한 `try-except` 블록, 상세 로깅, 간단한 재시도 로직 구현.\n- 모든 코드에 **한글 주석** 및 타입 힌트 적용.",
      "testStrategy": "- Qdrant Cloud 연결 및 인증 성공 여부 테스트.\n- 컬렉션 자동 생성 로직 검증 (미존재 시 생성, 존재 시 미생성).\n- 데이터 삽입(upsert) 및 ID 기반 조회 정확성 테스트.\n- `company_id` 필터링을 포함한 유사도 검색 결과의 정확성 및 격리성 검증 (타 `company_id` 데이터 미노출 확인).\n- 다양한 메타데이터 필터링 조건 조합 테스트.\n- Qdrant 연결 실패, 잘못된 API 키 등 주요 에러 상황에 대한 예외 처리 및 로깅 동작 검증.\n- 벡터 차원(1536) 및 거리 함수 설정 확인.",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "OpenAI 임베딩 모듈 구현",
      "description": "LLM Router 및 Orchestrator 구현을 통한 다중 LLM 제공자 지원 및 프롬프트 관리 시스템 개발",
      "status": "completed",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "다음 핵심 기능을 `core/llm_router.py`에 구현:\n\n1. **다중 LLM 제공자 지원**:\n   - Anthropic, OpenAI, Gemini 등 다양한 LLM 제공자 연동\n   - 자동 폴백 메커니즘 구현 (특정 LLM 실패 시 다른 LLM으로 자동 전환)\n   - 로드 밸런싱 기능 구현\n   - LLM 성능 메트릭 수집 및 모니터링\n\n2. **프롬프트 관리**:\n   - 티켓 요약, 사용자 질문, 검색된 컨텍스트(유사 티켓, 관련 문서) 등 다양한 정보를 조합하여 최적의 프롬프트 동적 구성\n   - 'LLM 호출 시 맥락 중심으로 프롬프트 구성' 원칙 준수\n\n3. **LLM 호출 제어**:\n   - 사용자의 명시적인 요청(예: 'AI로 답변 생성' 버튼 클릭)이 있을 때만 LLM 호출\n   - 불필요한 API 호출 방지 로직 구현\n\n4. **컨텍스트 최적화**:\n   - 자연어 요청의 의도 파악\n   - LLM이 고품질 응답을 생성할 수 있도록 컨텍스트 정보 최적화\n\n5. **응답 처리**:\n   - LLM 응답 검증 및 후처리\n   - 프론트엔드가 사용하기 쉬운 JSON 형식으로 변환\n\n6. **에러 핸들링**:\n   - LLM API 호출 실패, 타임아웃 등의 에러 상황에 대한 강력한 에러 처리\n   - 폴백 로직 구현",
      "testStrategy": "1. 각 LLM 제공자 API 연동 테스트 (모킹 활용)\n2. 프롬프트 구성 로직 단위 테스트\n3. 폴백 및 로드 밸런싱 기능 테스트\n4. 다양한 시나리오(예: 컨텍스트 부족, LLM 응답 오류)에 대한 통합 테스트\n5. 에러 처리 및 재시도 로직 테스트\n6. 응답 처리 및 JSON 변환 테스트",
      "subtasks": [
        {
          "id": 3.1,
          "title": "다중 LLM 제공자 연동 구현",
          "description": "Anthropic, OpenAI, Gemini 등 다양한 LLM 제공자 API 연동 구현",
          "status": "pending"
        },
        {
          "id": 3.2,
          "title": "자동 폴백 및 로드 밸런싱 구현",
          "description": "LLM 호출 실패 시 대체 제공자로 자동 전환하는 폴백 메커니즘과 부하 분산을 위한 로드 밸런싱 구현",
          "status": "pending"
        },
        {
          "id": 3.3,
          "title": "프롬프트 관리 시스템 개발",
          "description": "다양한 컨텍스트 정보를 조합하여 최적의 프롬프트를 동적으로 구성하는 시스템 개발",
          "status": "pending"
        },
        {
          "id": 3.4,
          "title": "LLM 호출 제어 로직 구현",
          "description": "사용자의 명시적 요청에만 LLM을 호출하도록 제어하는 로직 구현",
          "status": "pending"
        },
        {
          "id": 3.5,
          "title": "응답 처리 및 변환 기능 개발",
          "description": "LLM 응답을 검증하고 프론트엔드용 JSON 형식으로 변환하는 기능 개발",
          "status": "pending"
        },
        {
          "id": 3.6,
          "title": "에러 핸들링 및 재시도 로직 구현",
          "description": "API 호출 실패, 타임아웃 등의 에러 상황에 대한 처리 및 재시도 로직 구현",
          "status": "pending"
        },
        {
          "id": 3.7,
          "title": "LLM 성능 메트릭 수집 시스템 구현",
          "description": "각 LLM 제공자의 응답 시간, 성공률, 품질 등을 모니터링하는 메트릭 수집 시스템 구현",
          "status": "pending"
        }
      ]
    },
    {
      "id": 4,
      "title": "LLM Router 패턴 구현",
      "description": "Freshdesk API를 사용하여 티켓, 기술 자료(솔루션), 첨부 파일 데이터를 수집, 처리 및 Qdrant에 저장하는 모듈을 개발합니다. 이 모듈은 대용량 데이터 처리, Freshdesk API rate limit 처리, 첨부 파일 처리 기능을 포함해야 합니다.",
      "status": "completed",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "`freshdesk/` 디렉토리 내에 관련 모듈(`fetcher.py`, `processor.py` 등)을 구현합니다. Freshdesk API 클라이언트는 `FRESHDESK_DOMAIN`, `FRESHDESK_API_KEY` 환경 변수를 사용하여 초기화합니다. 티켓 및 솔루션 데이터 수집 로직은 전체 동기화 및 증분 업데이트를 지원해야 합니다. 대용량 데이터 처리를 위해 청크 단위 수집 및 페이지네이션을 구현하고, `created_since`, `updated_since` 필터를 활용합니다. Freshdesk API Rate Limit 발생 시 지수 백오프 및 재시도 로직을 구현합니다. 첨부 파일 처리는 `PROCESS_ATTACHMENTS` 환경 변수에 따라 조건부로 실행되며, 메타데이터 저장 또는 내용 추출 후 저장을 지원합니다. 데이터 전처리 및 정제 과정에는 HTML 태그 제거, 개인 정보 마스킹 등이 포함될 수 있습니다. 수집된 데이터는 Qdrant에 저장하기 적합한 형식으로 변환합니다. (벡터 임베딩 생성은 이 작업의 범위에 포함되지 않습니다.) `company_id`를 사용하여 멀티테넌시를 지원합니다. 모든 과정에 구조화된 로깅 및 상세한 에러 처리를 적용합니다 (Freshdesk API 오류, 데이터 처리 오류 등). 모든 코드에는 상세한 한글 주석을 필수로 작성합니다.",
      "testStrategy": "Freshdesk API 연결 및 인증 기능 테스트. 다양한 조건(신규, 업데이트, 대량)에서의 티켓 및 솔루션 데이터 수집 정확성 테스트. API Rate Limit 처리 로직의 효과 검증. 첨부 파일 처리 로직 검증 (활성화/비활성화 시나리오 포함). 데이터 전처리 및 정제 과정의 정확성 테스트. Qdrant 저장용 데이터 변환 로직의 정확성 테스트. 에러 처리 및 로깅 기능의 완전성 검증.",
      "subtasks": [
        {
          "id": 4.1,
          "title": "Freshdesk API 클라이언트 및 인증 모듈 구현",
          "description": "`freshdesk/auth.py` 또는 `freshdesk/client.py`에 Freshdesk API 클라이언트 및 인증 모듈 구현",
          "status": "pending"
        },
        {
          "id": 4.2,
          "title": "티켓 데이터 수집 및 페이지네이션 처리 로직 개발",
          "description": "`freshdesk/fetchers/ticket_fetcher.py`에 티켓 데이터 수집 및 페이지네이션 처리 로직 개발",
          "status": "pending"
        },
        {
          "id": 4.3,
          "title": "솔루션(기술 자료) 데이터 수집 로직 개발",
          "description": "`freshdesk/fetchers/solution_fetcher.py`에 솔루션(기술 자료) 데이터 수집 로직 개발",
          "status": "pending"
        },
        {
          "id": 4.4,
          "title": "Freshdesk API Rate Limit 핸들러 구현",
          "description": "공통 유틸리티 또는 각 fetcher 내부에 Freshdesk API Rate Limit 핸들러 구현",
          "status": "pending"
        },
        {
          "id": 4.5,
          "title": "첨부 파일 메타데이터 수집 및 내용 추출 로직 개발",
          "description": "`freshdesk/processors/attachment_processor.py`에 첨부 파일 메타데이터 수집 및 (선택적) 내용 추출 로직 개발",
          "status": "pending"
        },
        {
          "id": 4.6,
          "title": "수집 데이터 전처리 및 개인 정보 마스킹 모듈 개발",
          "description": "`freshdesk/processors/data_cleaner.py`에 수집 데이터 전처리(HTML 태그 제거, 기본 정제) 및 개인 정보 마스킹 모듈 개발",
          "status": "pending"
        },
        {
          "id": 4.7,
          "title": "Qdrant 저장 형식으로 데이터 변환 로직 개발",
          "description": "각 fetcher 또는 별도 `freshdesk/transformers.py`에서 Qdrant 저장 형식으로 데이터 변환 로직 개발",
          "status": "pending"
        },
        {
          "id": 4.8,
          "title": "Freshdesk 연동 관련 포괄적인 에러 처리 및 구조화된 로깅 강화",
          "description": "모든 관련 모듈에 Freshdesk 연동 관련 포괄적인 에러 처리 및 구조화된 로깅 강화",
          "status": "pending"
        },
        {
          "id": 4.9,
          "title": "Freshdesk 연동 각 모듈에 대한 단위 테스트 작성",
          "description": "`tests/freshdesk/`에 Freshdesk 연동 각 모듈에 대한 단위 테스트 작성",
          "status": "pending"
        }
      ]
    },
    {
      "id": 5,
      "title": "Freshdesk API 연동 모듈 개발",
      "description": "Freshdesk API를 통한 티켓 및 솔루션 데이터 수집 후 OpenAI 임베딩 모델을 사용하여 벡터로 변환하고 Qdrant 벡터 DB에 저장하는 파이프라인 구축",
      "status": "completed",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "Freshdesk API 연동 모듈 개발 및 수집된 데이터의 임베딩 파이프라인 구축:\n\n1. Freshdesk API 연동:\n- httpx 패키지를 활용한 비동기 HTTP 클라이언트 구현\n- Freshdesk API 인증 및 기본 설정\n- 티켓 데이터 수집 함수 구현(페이지네이션 처리, 대용량 데이터 고려)\n- 솔루션 문서 수집 함수 구현\n- 첨부파일 다운로드 및 메타데이터 추출 기능\n- Rate limiting 및 API 할당량 관리\n- 에러 처리 및 재시도 로직\n\n2. 임베딩 및 Qdrant 저장 파이프라인:\n- `core/embedding_pipeline.py` 또는 `data/embedding_service.py` 등에 핵심 로직 구현\n- OpenAI API 클라이언트는 `OPENAI_API_KEY` 환경 변수를 사용하여 초기화\n- 임베딩 모델은 `EMBEDDING_MODEL` 환경 변수(`text-embedding-3-small` 등)를 참조하여 동적으로 로드\n- 텍스트 데이터를 임베딩 모델의 최대 토큰 길이에 맞춰 청크로 분할하는 로직 구현 (예: `text-embedding-3-small`의 경우 8191 토큰)\n- 임베딩 생성 시 배치 처리를 활용하여 API 호출 효율성 향상\n- 생성된 벡터와 원본 텍스트, Freshdesk 메타데이터(`ticket_id`, `solution_id`, `company_id`, `created_at`, `updated_at` 등)를 Qdrant에 저장\n- Qdrant 저장 시 `upsert_points` API를 사용하며, `company_id`를 포함한 페이로드 구성\n- 임베딩 생성 및 Qdrant 저장 과정에서의 오류 처리 및 로깅\n- 대용량 데이터 처리 시 메모리 사용량 및 처리 시간 최적화\n- 모든 코드에 상세한 한글 주석 작성",
      "testStrategy": "1. Freshdesk API 연동 테스트:\n- Freshdesk API 연결 테스트\n- 티켓 및 솔루션 데이터 수집 정확성 테스트\n- 페이지네이션 처리 테스트\n- 에러 처리 및 재시도 로직 테스트\n- Rate limiting 준수 테스트\n- 메모리 사용량 모니터링\n\n2. 임베딩 및 Qdrant 저장 테스트:\n- OpenAI API 연결 및 임베딩 모델 로딩 기능 테스트\n- 텍스트 청킹 로직의 정확성 검증 (다양한 길이의 텍스트 입력)\n- 임베딩 생성 결과의 유효성 확인 (벡터 차원, 값 범위 등)\n- Qdrant 저장 로직 테스트 (데이터 정확성, 메타데이터 포함 여부)\n- 배치 처리 기능 및 성능 테스트\n- 다양한 오류 시나리오(API 키 오류, 네트워크 오류, Qdrant 연결 실패 등)에 대한 에러 처리 및 로깅 검증\n- `company_id` 기반 데이터 분리 저장 확인",
      "subtasks": [
        {
          "id": 5.1,
          "title": "Freshdesk API 클라이언트 구현",
          "description": "httpx 패키지를 활용한 비동기 HTTP 클라이언트 및 Freshdesk API 인증 구현",
          "status": "pending"
        },
        {
          "id": 5.2,
          "title": "티켓 및 솔루션 데이터 수집 함수 개발",
          "description": "페이지네이션 처리 및 대용량 데이터를 고려한 티켓 및 솔루션 문서 수집 함수 구현",
          "status": "pending"
        },
        {
          "id": 5.3,
          "title": "첨부파일 처리 및 메타데이터 추출 기능 개발",
          "description": "Freshdesk 티켓 및 솔루션의 첨부파일 다운로드 및 메타데이터 추출 기능 구현",
          "status": "pending"
        },
        {
          "id": 5.4,
          "title": "OpenAI API 클라이언트 초기화 및 임베딩 모델 로더 구현",
          "description": "`OPENAI_API_KEY` 환경 변수를 사용한 API 클라이언트 초기화 및 `EMBEDDING_MODEL` 환경 변수를 참조하여 임베딩 모델 동적 로드 기능 구현",
          "status": "pending"
        },
        {
          "id": 5.5,
          "title": "텍스트 데이터 청킹 유틸리티 개발",
          "description": "임베딩 모델의 최대 토큰 길이에 맞춰 텍스트 데이터를 청크로 분할하는 유틸리티 개발 (모델별 최대 토큰 길이 고려)",
          "status": "pending"
        },
        {
          "id": 5.6,
          "title": "OpenAI 임베딩 생성 서비스 구현",
          "description": "배치 처리 기능을 포함한 OpenAI 임베딩 생성 서비스 구현 (API 호출 효율성 최적화)",
          "status": "pending"
        },
        {
          "id": 5.7,
          "title": "Qdrant 저장용 데이터 구조 정의 및 변환 로직 개발",
          "description": "벡터, 원본 텍스트, Freshdesk 메타데이터(`ticket_id`, `solution_id`, `company_id` 등)를 포함한 Qdrant 저장용 데이터 구조 정의 및 변환 로직 개발",
          "status": "pending"
        },
        {
          "id": 5.8,
          "title": "Qdrant 포인트 업서트 로직 구현",
          "description": "`upsert_points` API를 사용하여 임베딩 벡터와 메타데이터를 Qdrant에 저장하는 로직 구현 (`core/vectordb.py` 또는 `data/qdrant_handler.py`의 함수 활용)",
          "status": "pending"
        },
        {
          "id": 5.9,
          "title": "임베딩 및 저장 파이프라인 전체 흐름 제어 로직 개발",
          "description": "Freshdesk 데이터 수집부터 임베딩 생성, Qdrant 저장까지의 전체 파이프라인 흐름을 제어하는 로직 개발",
          "status": "pending"
        },
        {
          "id": 5.1,
          "title": "에러 처리 및 구조화된 로깅 강화",
          "description": "임베딩 생성 및 Qdrant 저장 과정에서의 오류(OpenAI API 오류, Qdrant 연결 오류, 데이터 형식 오류 등)를 상세히 처리하고 구조화된 로깅 구현",
          "status": "pending"
        },
        {
          "id": 5.11,
          "title": "단위 테스트 및 통합 테스트 작성",
          "description": "임베딩 및 Qdrant 저장 관련 단위 테스트 및 통합 테스트 작성 (`tests/core/` 또는 `tests/data/`)",
          "status": "pending"
        }
      ]
    },
    {
      "id": 6,
      "title": "백엔드 API 엔드포인트 기본 구조 구현",
      "description": "PRD에 정의된 핵심 API 엔드포인트인 `/init/{ticket_id}`와 `/query`를 FastAPI를 사용하여 구현합니다. 이 엔드포인트들은 백엔드 서비스의 주요 기능을 제공합니다.",
      "status": "completed",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "- `api/endpoints/` 디렉토리 내에 라우터 파일을 생성하여 엔드포인트를 구현합니다. (예: `api/endpoints/rag_handler.py`)\n- **`/init/{ticket_id}` 엔드포인트**:\n    - 경로 매개변수로 `ticket_id` (문자열)를 받습니다.\n    - `company_id`는 헤더 또는 인증 토큰에서 추출하여 사용합니다.\n    - 기능: 해당 `ticket_id`의 요약 정보, 유사 티켓 목록, 추천 기술 자료 목록을 반환합니다.\n    - 내부적으로 Context Builder, Retriever, (필요시) LLM Orchestrator와 상호작용합니다.\n    - 응답 모델(Pydantic)은 티켓 요약, 유사 티켓(ID, 제목, 유사도 점수), 추천 솔루션(ID, 제목, 관련성 점수)을 포함해야 합니다.\n    - Freshdesk 티켓 원본 데이터는 제공하지 않고, 요약 및 분석 결과만 제공합니다.\n- **`/query` 엔드포인트**:\n    - 요청 본문(Pydantic 모델)으로 `ticket_id` (문자열), `query_text` (문자열), `context_type` (선택적, 예: 'similar_tickets', 'solutions', 'full_context')을 받습니다.\n    - `company_id`는 헤더 또는 인증 토큰에서 추출하여 사용합니다.\n    - 기능: 사용자의 `query_text`와 제공된 `ticket_id` 및 `context_type`을 기반으로 LLM에게 질의하고 답변을 생성하여 반환합니다.\n    - 내부적으로 Context Builder, Retriever, LLM Orchestrator와 상호작용합니다.\n    - 응답 모델(Pydantic)은 LLM이 생성한 답변(마크다운 형식)과 사용된 컨텍스트(참고 자료 목록 등)를 포함해야 합니다.\n- 모든 엔드포인트는 비동기(async/await)로 구현합니다.\n- Pydantic을 사용하여 요청 및 응답 모델을 명확히 정의하고 유효성 검사를 수행합니다.\n- 의존성 주입(FastAPI Depends)을 활용하여 서비스 모듈(Context Builder, Retriever, LLM Orchestrator 등)을 주입받습니다.\n- 상세한 에러 처리(HTTP 예외 반환) 및 구조화된 로깅을 구현합니다.\n- 모든 코드에는 상세한 한글 주석을 필수로 작성합니다.\n- CORS 설정 및 보안 헤더 구성.\n- Rate limiting 미들웨어 구현.\n- 헬스체크 엔드포인트 구현.",
      "testStrategy": "- `/init/{ticket_id}` 엔드포인트 테스트:\n    - 유효한 `ticket_id` 및 `company_id`로 호출 시 정상 응답(요약, 유사 티켓, 추천 솔루션) 확인.\n    - 존재하지 않는 `ticket_id` 또는 잘못된 `company_id`에 대한 에러 처리 검증.\n    - 응답 데이터 형식 및 내용의 정확성 검증.\n- `/query` 엔드포인트 테스트:\n    - 다양한 `ticket_id`, `query_text`, `context_type` 조합으로 호출 시 정상 응답(LLM 답변, 참고 자료) 확인.\n    - 필수 요청 필드 누락 시 에러 처리 검증.\n    - LLM 연동 실패 시의 에러 처리 및 폴백 로직(정의된 경우) 검증.\n    - 응답 데이터 형식(마크다운) 및 내용의 정확성 검증.\n- 두 엔드포인트 모두에 대한 인증 및 권한 부여 로직(구현된 경우) 테스트.\n- 성능 테스트: 응답 시간, 동시 요청 처리 능력 등.\n- Rate limiting 테스트, CORS 설정 검증, 로깅 기능 테스트.",
      "subtasks": [
        {
          "id": 6.1,
          "title": "/init/{ticket_id} 및 /query 엔드포인트용 Pydantic 요청/응답 모델 정의",
          "description": "api/schemas/rag_schemas.py 또는 유사 파일에 두 핵심 엔드포인트에 필요한 모든 Pydantic 모델 정의",
          "status": "pending"
        },
        {
          "id": 6.2,
          "title": "FastAPI 라우터 설정 및 /init/{ticket_id} 엔드포인트 기본 로직 구현",
          "description": "api/endpoints/rag_handler.py에 라우터 설정 및 /init/{ticket_id} 엔드포인트의 기본 구조와 로직 구현",
          "status": "pending"
        },
        {
          "id": 6.3,
          "title": "/init/{ticket_id} 엔드포인트 내 Context Builder, Retriever 연동 로직 구현",
          "description": "Context Builder와 Retriever 서비스를 /init/{ticket_id} 엔드포인트에 연동하여 티켓 요약, 유사 티켓, 추천 솔루션 정보 제공 기능 구현",
          "status": "pending"
        },
        {
          "id": 6.4,
          "title": "FastAPI 라우터 설정 및 /query 엔드포인트 기본 로직 구현",
          "description": "api/endpoints/rag_handler.py에 /query 엔드포인트의 기본 구조와 로직 구현",
          "status": "pending"
        },
        {
          "id": 6.5,
          "title": "/query 엔드포인트 내 Context Builder, Retriever, LLM Orchestrator 연동 로직 구현",
          "description": "Context Builder, Retriever, LLM Orchestrator 서비스를 /query 엔드포인트에 연동하여 사용자 질의에 대한 LLM 응답 생성 기능 구현",
          "status": "pending"
        },
        {
          "id": 6.6,
          "title": "두 엔드포인트에 대한 의존성 주입 설정",
          "description": "FastAPI Depends를 활용하여 서비스 모듈(Context Builder, Retriever, LLM Orchestrator 등)을 엔드포인트에 주입하는 로직 구현",
          "status": "pending"
        },
        {
          "id": 6.7,
          "title": "두 엔드포인트에 대한 상세한 에러 처리 및 구조화된 로깅 구현",
          "description": "FastAPI HTTP 예외를 사용한 상세한 에러 처리 및 구조화된 JSON 로깅 구현",
          "status": "pending"
        },
        {
          "id": 6.8,
          "title": "/init/{ticket_id} 엔드포인트 단위 테스트 및 통합 테스트 작성",
          "description": "tests/api/endpoints/ 디렉토리에 /init/{ticket_id} 엔드포인트에 대한 단위 테스트 및 통합 테스트 작성",
          "status": "pending"
        },
        {
          "id": 6.9,
          "title": "/query 엔드포인트 단위 테스트 및 통합 테스트 작성",
          "description": "tests/api/endpoints/ 디렉토리에 /query 엔드포인트에 대한 단위 테스트 및 통합 테스트 작성",
          "status": "pending"
        },
        {
          "id": 6.1,
          "title": "API 문서 자동 생성 확인",
          "description": "Swagger/OpenAPI를 통한 API 문서 자동 생성 확인 및 필요시 문서 개선",
          "status": "pending"
        },
        {
          "id": 6.11,
          "title": "CORS 설정 및 보안 헤더 구성",
          "description": "FastAPI 애플리케이션에 CORS 설정 및 보안 헤더 구성 구현",
          "status": "pending"
        },
        {
          "id": 6.12,
          "title": "Rate limiting 미들웨어 구현",
          "description": "API 요청에 대한 Rate limiting 미들웨어 구현 및 설정",
          "status": "pending"
        },
        {
          "id": 6.13,
          "title": "헬스체크 엔드포인트 구현",
          "description": "시스템 상태 확인을 위한 헬스체크 엔드포인트 구현",
          "status": "pending"
        }
      ]
    },
    {
      "id": 7,
      "title": "/init/{ticket_id} 엔드포인트 구현",
      "description": "LLM에 전달할 최적의 컨텍스트를 구성하는 Context Builder 모듈을 `core/context_builder.py`에 구현합니다. 이 모듈은 `/init` 및 `/query` API 요청에 따라 다양한 소스(티켓 정보, 유사 티켓, 기술 자료, 사용자 질문 등)로부터 컨텍스트를 조합합니다.",
      "status": "completed",
      "dependencies": [
        2,
        3,
        4,
        5,
        6
      ],
      "priority": "high",
      "details": "- `core/context_builder.py`에 `ContextBuilder` 클래스 또는 관련 함수들을 구현합니다.\n- 주요 기능:\n    - 현재 티켓 정보(요약, 주요 내용)를 컨텍스트에 포함합니다.\n    - Retriever 모듈을 사용하여 검색된 유사 티켓 및 관련 기술 자료를 컨텍스트에 추가합니다.\n    - 사용자의 질문(`query_text`)을 컨텍스트에 명확하게 포함시킵니다.\n    - 컨텍스트의 총 길이를 LLM의 최대 토큰 제한에 맞게 동적으로 조절합니다 (중요도 기반으로 정보 필터링/요약).\n    - 컨텍스트 구성 시 프롬프트 엔지니어링 기법을 적용하여 LLM이 더 정확하고 관련성 높은 답변을 생성하도록 유도합니다.\n    - `context_type` (예: 'similar_tickets_only', 'solutions_only', 'full_rag')에 따라 컨텍스트 구성 전략을 다르게 적용할 수 있도록 유연하게 설계합니다.\n    - `company_id`를 고려하여 해당 회사의 데이터만 컨텍스트 구성에 사용하도록 합니다.\n- Retriever 모듈(`core/retriever.py`) 및 LLM Orchestrator(`core/llm_orchestrator.py`)와 긴밀하게 협력합니다.\n- 모든 코드에는 상세한 한글 주석을 필수로 작성합니다.",
      "testStrategy": "- 다양한 입력(티켓 정보, 검색 결과, 사용자 질문)에 따른 컨텍스트 구성 결과 검증.\n- 컨텍스트 길이 조절 로직 테스트 (토큰 제한 초과 여부, 정보 누락 최소화).\n- `context_type`에 따른 컨텍스트 구성 변화 확인.\n- 프롬프트 엔지니어링 적용 결과 (LLM 응답 품질 변화) 간접적 평가.\n- `company_id`에 따른 데이터 격리 검증.\n- Retriever 모듈과의 연동 테스트.",
      "subtasks": [
        {
          "id": 7.1,
          "title": "`ContextBuilder` 클래스 또는 핵심 함수 기본 구조 설계 및 구현",
          "description": "`core/context_builder.py`에 Context Builder 모듈의 기본 구조를 설계하고 구현합니다.",
          "status": "pending"
        },
        {
          "id": 7.2,
          "title": "현재 티켓 정보를 컨텍스트에 추가하는 로직 구현",
          "description": "티켓 요약 및 주요 내용을 컨텍스트에 포함시키는 기능을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 7.3,
          "title": "유사 티켓 목록을 컨텍스트에 통합하는 로직 구현",
          "description": "Retriever로부터 받은 유사 티켓 정보를 컨텍스트에 효과적으로 통합하는 로직을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 7.4,
          "title": "관련 기술 자료 목록을 컨텍스트에 통합하는 로직 구현",
          "description": "Retriever로부터 받은 관련 기술 자료를 컨텍스트에 통합하는 로직을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 7.5,
          "title": "사용자 질문을 컨텍스트에 포함시키는 로직 구현",
          "description": "사용자의 질문(`query_text`)을 컨텍스트에 명확하게 포함시키는 로직을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 7.6,
          "title": "컨텍스트 길이 동적 조절 및 최적화 로직 구현",
          "description": "LLM의 최대 토큰 제한을 고려하여 컨텍스트 길이를 동적으로 조절하고, 중요도 기반으로 정보를 필터링/요약하는 로직을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 7.7,
          "title": "`context_type`에 따른 다양한 컨텍스트 구성 전략 구현",
          "description": "다양한 컨텍스트 타입(예: 'similar_tickets_only', 'solutions_only', 'full_rag')에 따라 컨텍스트 구성 전략을 다르게 적용하는 로직을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 7.8,
          "title": "프롬프트 엔지니어링 기법 적용",
          "description": "컨텍스트 구성 시 프롬프트 엔지니어링 기법(역할 부여, 명확한 지시사항 추가 등)을 적용하여 LLM이 더 정확한 답변을 생성하도록 유도합니다.",
          "status": "pending"
        },
        {
          "id": 7.9,
          "title": "`company_id`를 고려한 데이터 필터링 로직 통합",
          "description": "`company_id`를 기반으로 해당 회사의 데이터만 컨텍스트 구성에 사용되도록 필터링 로직을 통합합니다.",
          "status": "pending"
        },
        {
          "id": 7.1,
          "title": "Context Builder 모듈 단위 테스트 작성",
          "description": "`tests/core/` 디렉토리에 Context Builder 모듈의 기능을 검증하는 단위 테스트를 작성합니다.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 8,
      "title": "/query 엔드포인트 구현",
      "description": "Qdrant 벡터 DB에서 관련 정보를 검색하는 Retriever 모듈을 `core/retriever.py`에 구현합니다. 이 모듈은 Context Builder의 요청에 따라 유사 티켓, 관련 기술 자료 등을 검색하여 제공합니다.",
      "status": "completed",
      "dependencies": [
        2,
        3,
        4,
        5,
        6
      ],
      "priority": "high",
      "details": "`core/retriever.py`에 `Retriever` 클래스 또는 관련 함수들을 구현합니다. 주요 기능으로는 입력된 텍스트(예: 현재 티켓 내용 또는 사용자 질문)를 기반으로 Qdrant에서 유사도 검색을 수행하고, 검색 대상 컬렉션(예: `tickets`, `solutions`) 및 `company_id`를 기준으로 필터링합니다. 검색 결과의 개수(top_k)를 조절할 수 있는 매개변수를 제공하며, 다양한 검색 전략을 지원할 수 있도록 설계합니다(예: 순수 벡터 검색, 메타데이터 필터링 결합, 하이브리드 검색). 검색 결과에는 원본 텍스트 조각, 메타데이터, 유사도 점수 등을 포함하여 반환하고, Qdrant 클라이언트를 사용하여 Qdrant와 상호작용합니다. Context Builder(`core/context_builder.py`) 모듈과 긴밀하게 협력하며, 모든 코드에는 상세한 한글 주석을 필수로 작성합니다.",
      "testStrategy": "다양한 검색어 및 `company_id`에 대한 검색 결과의 정확성 및 관련성 검증. `top_k` 매개변수 조절에 따른 결과 개수 변화 확인. 필터링 조건(컬렉션, `company_id`) 적용 결과 검증. 검색 속도 및 성능 측정. Qdrant 연결 실패 등 예외 상황에 대한 에러 처리 검증. Context Builder와의 연동 테스트.",
      "subtasks": [
        {
          "id": 8.1,
          "title": "Retriever 클래스 또는 핵심 함수 기본 구조 설계 및 구현",
          "description": "`core/retriever.py`에 Retriever 클래스 또는 핵심 함수의 기본 구조를 설계하고 구현합니다.",
          "status": "pending"
        },
        {
          "id": 8.2,
          "title": "입력 텍스트에 대한 임베딩 생성 로직 연동",
          "description": "OpenAI 임베딩 모듈을 활용하여 입력 텍스트에 대한 임베딩을 생성하는 로직을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 8.3,
          "title": "티켓 검색용 Qdrant 유사도 검색 함수 구현",
          "description": "티켓 데이터를 대상으로 Qdrant에서 유사도 검색을 수행하는 함수를 구현합니다.",
          "status": "pending"
        },
        {
          "id": 8.4,
          "title": "기술 자료 검색용 Qdrant 유사도 검색 함수 구현",
          "description": "기술 자료를 대상으로 Qdrant에서 유사도 검색을 수행하는 함수를 구현합니다.",
          "status": "pending"
        },
        {
          "id": 8.5,
          "title": "company_id 및 기타 메타데이터 필터링 적용 로직 구현",
          "description": "검색 시 company_id 및 기타 메타데이터를 기준으로 필터링을 적용하는 로직을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 8.6,
          "title": "검색 결과 개수(top_k) 조절 기능 구현",
          "description": "검색 결과의 개수를 조절할 수 있는 매개변수(top_k)를 구현합니다.",
          "status": "pending"
        },
        {
          "id": 8.7,
          "title": "검색 결과 포맷팅 로직 구현",
          "description": "검색 결과(텍스트 조각, 메타데이터, 점수)를 적절한 형식으로 포맷팅하는 로직을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 8.8,
          "title": "Qdrant 클라이언트 연동 로직 구현",
          "description": "Qdrant 클라이언트(`core/vectordb.py` 또는 `data/qdrant_handler.py`의 함수)를 사용하여 Qdrant와 상호작용하는 로직을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 8.9,
          "title": "Retriever 모듈 단위 테스트 작성",
          "description": "`tests/core/` 디렉토리에 Retriever 모듈에 대한 단위 테스트를 작성합니다.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 9,
      "title": "/similar_tickets 엔드포인트 구현",
      "description": "LLM Router를 통해 실제 LLM 호출을 관리하고, Context Builder로부터 받은 컨텍스트를 사용하여 프롬프트를 생성하며, LLM 응답을 후처리하는 LLM Orchestrator 모듈을 `core/llm_orchestrator.py`에 구현합니다.",
      "status": "completed",
      "dependencies": [
        2,
        3,
        6
      ],
      "priority": "medium",
      "details": "`core/llm_orchestrator.py`에 `LLMOrchestrator` 클래스 또는 관련 함수들을 구현합니다.\n주요 기능:\n- Context Builder가 생성한 컨텍스트와 사용자 질문을 기반으로 최종 LLM 프롬프트를 구성합니다.\n- LLM Router(`core/llm_router.py`)를 사용하여 선택된 LLM(Anthropic, OpenAI, Gemini 등)에 프롬프트를 전달하고 응답을 받습니다.\n- LLM 응답을 애플리케이션 요구사항에 맞게 후처리합니다 (예: JSON 형식 검증, 마크다운 형식 변환, 불필요한 내용 제거, 안전성 필터링).\n- LLM 호출 시 타임아웃 설정, 재시도 로직(필요시)을 관리합니다.\n- LLM 사용량(토큰 수, 비용 등)을 추적하고 로깅할 수 있는 기능을 제공합니다.\n- 스트리밍 응답을 지원해야 하는 경우, 해당 로직을 처리합니다 (구현 가능한 경우).\n- `company_id`를 로깅 및 모니터링 목적으로 활용할 수 있습니다.\n\nContext Builder(`core/context_builder.py`) 및 LLM Router(`core/llm_router.py`)와 긴밀하게 협력합니다.\n모든 코드에는 상세한 한글 주석을 필수로 작성합니다.",
      "testStrategy": "다양한 컨텍스트 및 질문에 대한 프롬프트 생성 결과 검증. LLM Router 연동 테스트 (각 LLM 제공자별 호출 성공 여부). LLM 응답 후처리 로직 테스트 (형식 변환, 내용 정제 등). 타임아웃 및 재시도 로직(구현된 경우) 검증. LLM 사용량 추적 및 로깅 기능 확인. 스트리밍 응답(구현된 경우) 테스트. LLM 호출 실패 시 에러 처리 및 폴백(LLM Router에서 처리) 확인.",
      "subtasks": [
        {
          "id": 9.1,
          "title": "LLMOrchestrator 클래스 또는 핵심 함수 기본 구조 설계 및 구현",
          "description": "`core/llm_orchestrator.py`에 LLMOrchestrator 클래스 또는 관련 함수들의 기본 구조를 설계하고 구현합니다.",
          "status": "pending"
        },
        {
          "id": 9.2,
          "title": "최종 LLM 프롬프트 생성 로직 구현",
          "description": "Context Builder가 생성한 컨텍스트와 사용자 질문을 기반으로 최종 LLM 프롬프트를 구성하는 로직을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 9.3,
          "title": "LLM Router를 통한 LLM 호출 로직 구현",
          "description": "LLM Router(`core/llm_router.py`)를 사용하여 선택된 LLM(Anthropic, OpenAI, Gemini 등)에 프롬프트를 전달하고 응답을 받는 로직을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 9.4,
          "title": "LLM 응답 후처리 로직 구현",
          "description": "LLM 응답을 애플리케이션 요구사항에 맞게 후처리하는 로직(JSON 검증, 마크다운 변환, 안전성 필터링 등)을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 9.5,
          "title": "LLM 호출 타임아웃 및 재시도 로직 관리 기능 구현",
          "description": "LLM 호출 시 타임아웃 설정 및 필요시 재시도 로직을 관리하는 기능을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 9.6,
          "title": "LLM 사용량 추적 및 로깅 기능 구현",
          "description": "LLM 사용량(토큰 수, 비용 등)을 추적하고 로깅할 수 있는 기능을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 9.7,
          "title": "스트리밍 응답 처리 로직 구현",
          "description": "스트리밍 응답을 지원해야 하는 경우, 해당 로직을 처리하는 기능을 구현합니다.",
          "status": "pending"
        },
        {
          "id": 9.8,
          "title": "LLM Orchestrator 모듈 단위 테스트 작성",
          "description": "`tests/core/` 디렉토리에 LLM Orchestrator 모듈에 대한 단위 테스트를 작성합니다.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 10,
      "title": "/related_docs 엔드포인트 구현",
      "description": "Response Assembler 모듈 구현: LLM Orchestrator로부터 받은 최종 LLM 응답과 기타 필요한 정보(예: 참고 자료, 유사 티켓 목록)를 조합하여 API 엔드포인트가 프론트엔드에 전달할 최종 응답 객체를 생성하는 모듈을 구현합니다.",
      "status": "completed",
      "dependencies": [
        2,
        3,
        6
      ],
      "priority": "medium",
      "details": "`api/response_assembler.py` (또는 각 엔드포인트 핸들러 내)에 `ResponseAssembler` 클래스 또는 관련 함수들을 구현합니다. 주요 기능: 1) `/init` 엔드포인트: 티켓 요약 정보, 유사 티켓 목록, 추천 기술 자료 목록을 조합. 2) `/query` 엔드포인트: LLM 생성 답변, 사용된 컨텍스트, 메타데이터를 조합. 프론트엔드 요구사항 고려 (HTML 렌더링을 위한 마크다운 형식). 민감 정보 마스킹/필터링. `company_id` 정보 제외. LLM Orchestrator, Retriever, API 스키마와 협력. 상세한 한글 주석 필수.",
      "testStrategy": "1) `/init` 엔드포인트 응답 조립 로직 테스트: 다양한 입력에 따른 최종 응답 객체 검증. 2) `/query` 엔드포인트 응답 조립 로직 테스트: 다양한 입력에 따른 최종 응답 객체 검증. 3) Pydantic 스키마 준수 확인. 4) 마크다운 형식 변환 정확성 검증. 5) 민감 정보 마스킹/필터링 로직 검증.",
      "subtasks": [
        {
          "id": 10.1,
          "title": "ResponseAssembler 클래스 또는 핵심 함수 기본 구조 설계 및 구현",
          "status": "pending"
        },
        {
          "id": 10.2,
          "title": "/init 엔드포인트 응답 조립 로직 구현",
          "status": "pending"
        },
        {
          "id": 10.3,
          "title": "/query 엔드포인트 응답 조립 로직 구현",
          "status": "pending"
        },
        {
          "id": 10.4,
          "title": "Pydantic 응답 스키마에 맞게 데이터 변환 및 매핑 로직 구현",
          "status": "pending"
        },
        {
          "id": 10.5,
          "title": "마크다운 형식으로 최종 응답 내용 변환 로직 구현",
          "status": "pending"
        },
        {
          "id": 10.6,
          "title": "최종 응답에 대한 민감 정보 마스킹/필터링 로직 구현",
          "status": "pending"
        },
        {
          "id": 10.7,
          "title": "Response Assembler 모듈 단위 테스트 작성",
          "status": "pending"
        }
      ]
    },
    {
      "id": 11,
      "title": "Freshdesk FDK 프로젝트 초기 설정",
      "description": "Freshdesk FDK를 사용하여 앱의 기본 UI 구조와 레이아웃을 PRD에 명시된 대로 구현합니다. 여기에는 티켓 요약 카드, 3개의 탭 영역(유사 티켓, 추천 솔루션, OO와 대화하기)이 포함됩니다.",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "details": "Freshdesk FDK의 `app/` 디렉토리 내에 React 컴포넌트들을 생성하여 UI를 구성합니다. (예: `app/components/TicketSummaryCard.js`, `app/components/TabsArea.js` 등)\n\n**티켓 요약 카드 (Ticket Summary Card)**:\n- `/init` API로부터 받은 티켓 요약 정보를 표시합니다.\n- 간결하고 명확한 정보 전달에 중점을 둡니다.\n\n**3개의 탭 영역 (Tabs Area)**:\n- **유사 티켓 (Similar Tickets) 탭**: `/init` API로부터 받은 유사 티켓 목록을 표시합니다. 각 티켓은 제목, ID, 유사도 점수 등을 포함할 수 있습니다.\n- **추천 솔루션 (Recommended Solutions) 탭**: `/init` API로부터 받은 추천 기술 자료(솔루션) 목록을 표시합니다. 각 솔루션은 제목, ID, 관련성 점수 등을 포함할 수 있습니다.\n- **OO와 대화하기 (Chat with OO) 탭**: 사용자가 현재 티켓 컨텍스트 내에서 LLM과 직접 대화할 수 있는 인터페이스를 제공합니다. 입력창과 대화 내용 표시 영역으로 구성됩니다. `/query` API를 호출하여 LLM 응답을 받아 표시합니다.\n\n**기술 스택 및 구현 방식**:\n- 상태 관리: Zustand (또는 React Context)를 사용하여 API 응답 데이터, 사용자 입력, UI 상태 등을 관리합니다.\n- API 연동: Axios 또는 Fetch API를 사용하여 백엔드 API (`/init`, `/query`)를 호출하고 응답을 처리합니다.\n- 스타일링: Freshdesk 앱 스타일에 맞춰 CSS 또는 CSS-in-JS 라이브러리를 사용하여 UI를 스타일링합니다. 반응형 디자인을 고려합니다.\n- 컴포넌트 기반 개발: 재사용 가능한 UI 컴포넌트를 적극적으로 활용합니다.\n- 모든 코드에는 상세한 한글 주석을 필수로 작성합니다.\n\n**기본 설정 작업**:\n- Freshdesk CLI 설치 및 설정(fdk-cli)\n- FDK 프로젝트 생성 및 기본 구조 설정\n- 필요한 의존성 설치: React, Zustand(3.7.0+) 또는 React Context, Axios, React Query(선택적)\n- 프로젝트 구조 설정: app/, assets/, config/, services/, components/, hooks/\n- 기본 스타일 및 테마 설정\n- 개발 환경 설정 및 로컬 테스트 환경 구성\n- 빌드 및 배포 스크립트 설정\n- manifest.json 구성(앱 메타데이터, 권한 등)\n- iparams.json 초기 설정",
      "testStrategy": "- 티켓 요약 카드 UI 및 데이터 표시 정확성 검증\n- 각 탭(유사 티켓, 추천 솔루션, OO와 대화하기)의 UI 및 기능 정상 동작 확인\n- API 호출 및 응답 데이터 처리 로직 검증\n- 상태 관리 로직(Zustand/Context)의 정확성 검증\n- 다양한 화면 크기에서의 반응형 UI 동작 확인\n- 사용자 인터랙션(탭 전환, 입력, 버튼 클릭 등)에 대한 UI 반응성 테스트\n- 프로젝트 구조 검증, 의존성 설치 확인, 로컬 개발 환경 테스트, 빌드 프로세스 검증, manifest.json 유효성 검증",
      "subtasks": [
        {
          "id": 11.1,
          "title": "TicketSummaryCard React 컴포넌트 기본 구조 및 UI 구현",
          "status": "pending"
        },
        {
          "id": 11.2,
          "title": "TabsArea React 컴포넌트 및 3개 탭(유사 티켓, 추천 솔루션, OO와 대화하기) 기본 구조 구현",
          "status": "pending"
        },
        {
          "id": 11.3,
          "title": "유사 티켓 탭 UI 및 데이터 표시 로직 구현",
          "status": "pending"
        },
        {
          "id": 11.4,
          "title": "추천 솔루션 탭 UI 및 데이터 표시 로직 구현",
          "status": "pending"
        },
        {
          "id": 11.5,
          "title": "OO와 대화하기 탭 UI (입력창, 대화 내용 표시 영역) 및 기본 인터랙션 로직 구현",
          "status": "pending"
        },
        {
          "id": 11.6,
          "title": "Zustand (또는 React Context) 스토어 설정 및 상태 관리 로직 초기 구현 (API 데이터, UI 상태 등)",
          "status": "pending"
        },
        {
          "id": 11.7,
          "title": "백엔드 API (/init, /query) 호출을 위한 서비스 모듈(Axios/Fetch 사용) 구현 (app/services/api.js)",
          "status": "pending"
        },
        {
          "id": 11.8,
          "title": "/init API 호출 및 응답 데이터를 티켓 요약 카드, 유사 티켓 탭, 추천 솔루션 탭에 바인딩하는 로직 구현",
          "status": "pending"
        },
        {
          "id": 11.9,
          "title": "/query API 호출 및 응답 데이터를 OO와 대화하기 탭에 표시하는 로직 구현",
          "status": "pending"
        },
        {
          "id": 11.1,
          "title": "기본 CSS 스타일링 및 Freshdesk UI 가이드라인 준수",
          "status": "pending"
        },
        {
          "id": 11.11,
          "title": "각 주요 UI 컴포넌트에 대한 단위 테스트 또는 스토리북(Storybook) 설정 (선택적)",
          "status": "pending"
        }
      ]
    },
    {
      "id": 12,
      "title": "프론트엔드 응답 표시 및 상태 관리 구현",
      "description": "전통적인 HTML/CSS/JavaScript를 사용하여 LLM의 응답을 리치 텍스트 형식으로 표시하고, 사용자 인터랙션을 처리하는 기능을 구현합니다.",
      "status": "pending",
      "dependencies": [
        11
      ],
      "priority": "high",
      "details": "- 마크다운 라이브러리(marked.js 또는 유사)를 사용하여 LLM 응답을 HTML로 변환하여 표시합니다.\n- 'OO와 대화하기' 탭의 대화 내용 표시 영역에 HTML 기반 콘텐츠 렌더링 시스템을 구현합니다.\n- 백엔드 `/query` API로부터 받은 LLM 응답을 안전하게 HTML로 파싱하고 표시합니다.\n  - 마크다운 텍스트를 HTML로 변환하는 로직을 구현합니다.\n  - XSS 공격 방지를 위한 콘텐츠 새니타이징을 적용합니다.\n- LLM 응답에 포함된 코드 블록, 목록, 인용구, 테이블 등의 리치 텍스트 요소가 올바르게 렌더링되도록 합니다.\n- 사용자의 메시지 입력 및 편집 기능을 일반 텍스트영역(textarea)으로 구현합니다.\n- CSS를 사용하여 Freshdesk UI와 일관된 스타일링을 적용합니다.\n- 대화가 길어질 경우 스크롤 처리 및 성능 최적화를 고려합니다.\n- 모든 코드에는 상세한 한글 주석을 필수로 작성합니다.",
      "testStrategy": "- 마크다운-HTML 변환이 정상적으로 작동하는지 확인.\n- 백엔드로부터 받은 다양한 형식의 LLM 응답(텍스트, 코드 블록, 목록 등)이 올바르게 HTML로 렌더링되는지 검증.\n- XSS 공격 방지를 위한 새니타이징 로직의 효과성 테스트.\n- 리치 텍스트 요소(코드 하이라이팅, 목록 들여쓰기 등)의 올바른 렌더링 확인.\n- CSS 스타일링 및 UI 일관성 검증.\n- 긴 대화 내용에 대한 스크롤 및 성능 테스트.",
      "subtasks": [
        {
          "id": 12.1,
          "title": "마크다운 파싱 라이브러리(marked.js 등) 설치 및 프로젝트 설정",
          "status": "pending"
        },
        {
          "id": 12.2,
          "title": "'OO와 대화하기' 탭 내에 HTML 기반 콘텐츠 렌더링 영역 구현",
          "status": "pending"
        },
        {
          "id": 12.3,
          "title": "백엔드 LLM 응답(마크다운)을 안전한 HTML로 변환하는 파서 구현",
          "status": "pending"
        },
        {
          "id": 12.4,
          "title": "LLM 응답의 리치 텍스트 요소(코드 블록, 목록, 인용 등) 렌더링 및 스타일 적용",
          "status": "pending"
        },
        {
          "id": 12.5,
          "title": "사용자 메시지 입력을 위한 텍스트영역 및 전송 버튼 구현",
          "status": "pending"
        },
        {
          "id": 12.6,
          "title": "대화 내용 표시 영역 CSS 스타일링 (Freshdesk UI와 일관성 유지)",
          "status": "pending"
        },
        {
          "id": 12.7,
          "title": "긴 대화 내용 스크롤 처리 및 성능 최적화 방안 검토 및 적용",
          "status": "pending"
        },
        {
          "id": 12.8,
          "title": "HTML 렌더링 및 XSS 방지 관련 단위 테스트 또는 기능 테스트 작성",
          "status": "pending"
        }
      ]
    },
    {
      "id": 13,
      "title": "API 서비스 레이어 구현",
      "description": "Freshdesk 앱 관리자가 환경 변수 및 주요 설정을 관리할 수 있는 `iparams.html` 페이지를 개발합니다. 이 페이지는 Freshdesk FDK의 설치 매개변수(iparams) 기능을 활용합니다.",
      "status": "pending",
      "dependencies": [
        11,
        12
      ],
      "priority": "high",
      "details": "- `config/iparams.json` 파일에 관리자가 설정할 수 있는 파라미터들을 정의합니다. (예: `FRESHDESK_DOMAIN`, `FRESHDESK_API_KEY`, `QDRANT_URL`, `QDRANT_API_KEY`, `ANTHROPIC_API_KEY`, `OPENAI_API_KEY`, `GOOGLE_API_KEY`, `COMPANY_ID`, `PROCESS_ATTACHMENTS`, `EMBEDDING_MODEL` 등)\n- 각 파라미터에는 `display_name`, `description`, `type` (text, number, dropdown, checkbox 등), `required`, `default_value` 등을 명시합니다.\n- API 키와 같이 민감한 정보는 `type: \"iparams_secret\"` 또는 `secure: true`와 같이 Freshdesk FDK에서 제공하는 보안 입력 필드를 사용합니다.\n- `config/iparams.html` 파일을 생성하고, `iparams.json`에 정의된 설정들을 입력받을 수 있는 HTML 폼을 구성합니다.\n- Freshdesk FDK의 가이드라인에 따라 `iparams.html`을 작성하여, 앱 설치 또는 업데이트 시 관리자가 값을 입력하고 저장할 수 있도록 합니다.\n- 입력 필드에는 명확한 레이블, 설명, 유효성 검사 규칙을 포함합니다.\n- 저장된 설정값은 백엔드 API 호출 시 헤더나 요청 본문에 포함되어 전달되거나, 프론트엔드에서 직접 사용될 수 있습니다.\n- UI는 Freshdesk 관리자 페이지의 스타일과 일관성을 유지하도록 합니다.\n- 모든 코드에는 상세한 한글 주석을 필수로 작성합니다.",
      "testStrategy": "- `iparams.json`에 정의된 모든 설정 항목이 `iparams.html`에 올바르게 표시되는지 확인.\n- 각 입력 필드의 타입(text, secret, checkbox 등) 및 유효성 검사가 정상 동작하는지 테스트.\n- 필수 입력 항목 누락 시 경고 또는 저장 방지 기능 확인.\n- 설정값 저장 및 로드 기능 테스트 (Freshdesk 앱 설치/업데이트 시나리오 모의).\n- 보안 입력 필드(API 키 등)가 마스킹 처리되는지 확인.\n- UI 스타일 및 레이아웃의 일관성 검증.",
      "subtasks": [
        {
          "id": 13.1,
          "title": "config/iparams.json 파일 정의",
          "description": "PRD에 명시된 모든 환경 변수 및 설정 항목 포함",
          "status": "pending"
        },
        {
          "id": 13.2,
          "title": "파라미터 속성 상세 정의",
          "description": "각 파라미터의 display_name, description, type, required, default_value, secure 등 속성 상세 정의",
          "status": "pending"
        },
        {
          "id": 13.3,
          "title": "config/iparams.html 파일 기본 구조 생성",
          "description": "iparams.html 파일의 기본 HTML 구조 생성",
          "status": "pending"
        },
        {
          "id": 13.4,
          "title": "입력 필드 구현",
          "description": "iparams.json 정의에 따라 iparams.html 내에 각 설정 항목에 대한 입력 필드(text, password, checkbox, dropdown 등) 구현",
          "status": "pending"
        },
        {
          "id": 13.5,
          "title": "입력 필드 메타데이터 추가",
          "description": "입력 필드 레이블, 설명, 도움말 텍스트 추가",
          "status": "pending"
        },
        {
          "id": 13.6,
          "title": "유효성 검사 로직 구현",
          "description": "입력값 유효성 검사 로직 구현 (클라이언트 사이드)",
          "status": "pending"
        },
        {
          "id": 13.7,
          "title": "FDK iparams 연동",
          "description": "Freshdesk FDK iparams 저장 및 로드 메커니즘 연동",
          "status": "pending"
        },
        {
          "id": 13.8,
          "title": "보안 입력 필드 처리",
          "description": "보안 입력 필드(API 키) 처리 확인",
          "status": "pending"
        },
        {
          "id": 13.9,
          "title": "페이지 스타일링",
          "description": "iparams.html 페이지 스타일링 (Freshdesk 관리자 UI와 일관성 유지)",
          "status": "pending"
        },
        {
          "id": 13.1,
          "title": "기능 테스트",
          "description": "iparams.html 기능 테스트 (로컬 FDK 환경 또는 실제 Freshdesk 개발 환경)",
          "status": "pending"
        }
      ]
    },
    {
      "id": 14,
      "title": "티켓 요약 카드 컴포넌트 개발",
      "description": "백엔드 FastAPI 애플리케이션을 위한 Dockerfile 및 docker-compose.yml 파일을 작성하여 컨테이너화하고, 개발 및 프로덕션 환경 관리를 용이하게 합니다.",
      "status": "pending",
      "dependencies": [
        12,
        13
      ],
      "priority": "medium",
      "details": "**Dockerfile (`backend/Dockerfile`)**:\n- Python 3.10을 공식 베이스 이미지로 사용합니다.\n- 작업 디렉토리를 설정하고, `requirements.txt`를 복사하여 의존성을 설치합니다.\n- 애플리케이션 코드를 컨테이너에 복사합니다.\n- FastAPI 애플리케이션 실행을 위해 Uvicorn을 사용하며, 적절한 포트(예: 8000)를 노출합니다.\n- 멀티스테이지 빌드를 활용하여 최종 이미지 크기를 최적화할 수 있습니다 (선택적).\n- 비루트 사용자로 애플리케이션을 실행하도록 설정하여 보안을 강화합니다 (선택적).\n\n**docker-compose.yml (`docker-compose.yml` 또는 `backend/docker-compose.yml`)**:\n- 백엔드 서비스(`backend`)를 정의하고, 위에서 작성한 Dockerfile을 빌드하도록 설정합니다.\n- 환경 변수 파일을 (`.env`) 참조하여 컨테이너에 환경 변수를 주입합니다. (예: `env_file: ./backend/.env`)\n- 포트 매핑 설정을 통해 호스트와 컨테이너 간 포트를 연결합니다 (예: `8000:8000`).\n- 볼륨 마운트를 설정하여 개발 시 코드 변경 사항이 컨테이너에 실시간으로 반영되도록 합니다 (개발 환경용 설정).\n- (선택적) Qdrant, 데이터베이스 등 외부 서비스가 로컬 개발 환경에 필요하다면, 해당 서비스들도 docker-compose에 추가할 수 있습니다. (단, Qdrant Cloud 사용 시에는 불필요)\n- 네트워크 설정을 통해 서비스 간 통신을 관리합니다 (필요시).\n\n- `requirements.txt` 파일에는 FastAPI, Uvicorn, Pydantic, httpx, python-dotenv 등 필요한 모든 Python 라이브러리와 버전을 명시합니다.\n- 모든 코드 및 설정 파일에는 상세한 한글 주석을 필수로 작성합니다.",
      "testStrategy": "- `docker build` 명령어를 사용하여 Docker 이미지가 성공적으로 빌드되는지 확인.\n- `docker-compose up` 명령어를 사용하여 백엔드 서비스가 정상적으로 실행되는지 확인.\n- 컨테이너 로그를 통해 애플리케이션 시작 오류 여부 확인.\n- 호스트에서 매핑된 포트(예: `http://localhost:8000`)로 접속하여 API (예: 헬스체크 엔드포인트)가 정상 응답하는지 테스트.\n- 환경 변수가 컨테이너 내 애플리케이션에 올바르게 주입되었는지 확인.\n- 개발 환경에서 코드 변경 시 볼륨 마운트를 통해 컨테이너에 자동 반영(Uvicorn --reload 사용 시)되는지 확인.",
      "subtasks": [
        {
          "id": "14.1",
          "title": "백엔드 Python 의존성 목록을 `backend/requirements.txt` 파일로 정리",
          "status": "pending"
        },
        {
          "id": "14.2",
          "title": "`backend/Dockerfile` 작성 (Python 3.10 베이스, 의존성 설치, 코드 복사, Uvicorn 실행)",
          "status": "pending"
        },
        {
          "id": "14.3",
          "title": "(선택적) Dockerfile에 멀티스테이지 빌드 및 비루트 사용자 실행 로직 추가",
          "status": "pending"
        },
        {
          "id": "14.4",
          "title": "루트 또는 `backend/` 디렉토리에 `docker-compose.yml` 파일 작성",
          "status": "pending"
        },
        {
          "id": "14.5",
          "title": "`docker-compose.yml`에 백엔드 서비스 정의 (빌드 컨텍스트, Dockerfile 경로, 포트 매핑, 환경 변수 파일 참조)",
          "status": "pending"
        },
        {
          "id": "14.6",
          "title": "(개발용) `docker-compose.yml`에 소스 코드 볼륨 마운트 설정 추가",
          "status": "pending"
        },
        {
          "id": "14.7",
          "title": "(선택적) 로컬 개발용 외부 서비스(예: 로컬 Qdrant)를 `docker-compose.yml`에 추가",
          "status": "pending"
        },
        {
          "id": "14.8",
          "title": "Docker 이미지 빌드 테스트 (`docker build . -t backend-app`)",
          "status": "pending"
        },
        {
          "id": "14.9",
          "title": "Docker Compose 실행 테스트 (`docker-compose up`)",
          "status": "pending"
        },
        {
          "id": "14.10",
          "title": "실행된 컨테이너의 API 엔드포인트(헬스체크 등) 접근 테스트",
          "status": "pending"
        }
      ]
    },
    {
      "id": 15,
      "title": "유사 티켓 탭 컴포넌트 개발",
      "description": "유사 티켓 목록을 표시하는 탭 컴포넌트 구현",
      "status": "pending",
      "dependencies": [
        12,
        13
      ],
      "priority": "medium",
      "details": "유사 티켓 탭 UI 컴포넌트 설계 및 구현. 티켓 목록 표시 레이아웃(제목, 상태, 해결 방법 요약). 로딩 상태 및 스켈레톤 UI 구현. 에러 상태 처리 및 재시도 버튼. 티켓 항목 클릭 시 상세 정보 모달 구현. 답변 에디터 삽입 기능 구현. 정렬 및 필터링 옵션(선택적). 페이지네이션 또는 무한 스크롤 구현(선택적). 첫 로드 시 `/init` API 결과 활용 또는 `/similar_tickets` API 호출.",
      "testStrategy": "컴포넌트 렌더링 테스트, 데이터 표시 정확성 검증, 로딩/에러 상태 테스트, 모달 기능 테스트, 답변 삽입 기능 테스트, API 연동 테스트",
      "subtasks": []
    },
    {
      "id": 16,
      "title": "추천 솔루션 탭 컴포넌트 개발",
      "description": "Freshdesk Custom App의 전체 UI/UX 디자인을 확정하고, 주요 화면 및 상호작용에 대한 프로토타입을 제작합니다. PRD 및 프론트엔드 가이드라인에 명시된 레이아웃(티켓 요약 카드, 3-탭 영역)과 사용자 경험 원칙을 준수합니다.",
      "status": "pending",
      "dependencies": [
        12,
        13
      ],
      "priority": "medium",
      "details": "- UI 디자인 시스템 정의 (색상, 타이포그래피, 아이콘, 컴포넌트 스타일 가이드).\n- 주요 화면 디자인:\n    - 티켓 보기 페이지 내 앱 레이아웃.\n    - 상단: 티켓 요약 카드 (문제/원인/조치/결과 표시).\n    - 하단 3-탭 영역:\n        - 유사 티켓 탭 (목록, 상세 보기).\n        - 추천 솔루션 탭 (목록, 미리보기).\n        - OO와 대화하기 탭 (자연어 입력, 콘텐츠 선택 체크박스, 대화형 결과 표시).\n- 주요 상호작용 프로토타이핑 (Figma, Adobe XD 등 활용 또는 간단한 HTML/CSS 목업):\n    - `/init` 호출 시 초기 데이터 로딩 및 표시 흐름.\n    - 탭 전환 및 콘텐츠 표시.\n    - OO와 대화하기 탭에서의 자연어 입력, 검색 실행, 결과 표시.\n    - 검색 결과(유사 티켓, 솔루션)를 티켓 답변으로 삽입하는 과정.\n- 반응형 디자인 고려 (Freshdesk 환경 내에서의 유연성).\n- 접근성 가이드라인 준수.\n- 모든 디자인 요소 및 프로토타입에 대한 한글 설명 및 문서화.",
      "testStrategy": "- 디자인 검토: PRD 및 가이드라인 부합 여부, 사용성, 일관성 검토.\n- 프로토타입 테스트: 주요 사용자 시나리오 기반 인터랙션 검증.\n- 내부 사용자(상담사 역할) 피드백 수렴 및 반영.",
      "subtasks": [
        {
          "id": "16.1",
          "title": "UI 스타일 가이드 정의",
          "description": "색상, 폰트, 아이콘 등 UI 디자인 시스템 정의",
          "status": "pending"
        },
        {
          "id": "16.2",
          "title": "티켓 요약 카드 UI 디자인",
          "description": "문제/원인/조치/결과를 표시하는 티켓 요약 카드 디자인",
          "status": "pending"
        },
        {
          "id": "16.3",
          "title": "유사 티켓 탭 UI 디자인",
          "description": "유사 티켓 목록 및 상세 보기 UI 디자인",
          "status": "pending"
        },
        {
          "id": "16.4",
          "title": "추천 솔루션 탭 UI 디자인",
          "description": "추천 솔루션 목록 및 미리보기 UI 디자인",
          "status": "pending"
        },
        {
          "id": "16.5",
          "title": "OO와 대화하기 탭 UI 디자인",
          "description": "자연어 입력, 콘텐츠 선택 체크박스, 대화형 결과 표시 UI 디자인",
          "status": "pending"
        },
        {
          "id": "16.6",
          "title": "주요 인터랙션 프로토타입 제작",
          "description": "Figma 또는 HTML/CSS를 활용한 주요 인터랙션 프로토타입 제작",
          "status": "pending"
        },
        {
          "id": "16.7",
          "title": "디자인 검토 및 피드백 반영",
          "description": "완성된 디자인 및 프로토타입에 대한 검토 진행 및 피드백 반영",
          "status": "pending"
        }
      ]
    },
    {
      "id": 17,
      "title": "OO와 대화하기 탭 컴포넌트 개발",
      "description": "자연어 입력 및 대화형 UI를 제공하는 탭 컴포넌트 구현",
      "details": "대화 탭 UI 컴포넌트 설계 및 구현. 자연어 입력창 및 전송 버튼 구현. 콘텐츠 타입 선택 UI(티켓/솔루션/이미지/첨부파일). 대화 기록 표시 영역 구현. 로딩 상태 및 타이핑 애니메이션 구현. 에러 상태 처리 및 재시도 버튼. 티켓 응답 직접 등록 기능 구현. 메시지 복사 기능. 대화 내용 저장 및 불러오기 기능(localStorage). `/query` API 호출 및 응답 처리 로직 연동.",
      "testStrategy": "컴포넌트 렌더링 테스트, 입력 처리 테스트, 콘텐츠 타입 선택 기능 테스트, 대화 기록 표시 검증, 로딩/에러 상태 테스트, 티켓 응답 등록 기능 테스트, API 연동 테스트",
      "priority": "medium",
      "dependencies": [
        12,
        13
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 18,
      "title": "탭 컨테이너 및 네비게이션 구현",
      "description": "3개 탭을 관리하는 컨테이너 및 탭 네비게이션 구현",
      "details": "탭 컨테이너 UI 컴포넌트 설계 및 구현. 탭 네비게이션 바 구현(유사 티켓, 추천 솔루션, OO와 대화하기). 활성 탭 상태 관리 및 스타일링. 탭 전환 애니메이션 구현(선택적). 탭 내용 영역 구현 및 레이아웃 관리. 반응형 디자인 적용(모바일 지원). 탭 상태 지속성 구현(localStorage). 각 탭 컴포넌트 통합 및 데이터 흐름 관리.",
      "testStrategy": "탭 네비게이션 기능 테스트, 활성 탭 상태 관리 검증, 탭 전환 애니메이션 테스트, 반응형 디자인 검증, 탭 상태 지속성 테스트, 통합 데이터 흐름 테스트",
      "priority": "medium",
      "dependencies": [
        15,
        16,
        17
      ],
      "status": "pending",
      "subtasks": [],
      "complexityScore": 7
    },
    {
      "id": 19,
      "title": "티켓 응답 등록 기능 구현",
      "description": "AI 응답을 티켓에 직접 등록하는 기능 개발",
      "details": "티켓 응답 등록 UI 컴포넌트 설계 및 구현. 응답 내용 편집 기능 구현. 응답 미리보기 기능. 응답 등록 확인 모달. Freshdesk API를 통한 티켓 응답 등록 로직 구현. 응답 등록 성공/실패 피드백 UI. 응답 템플릿 저장 기능(선택적). 응답 등록 히스토리 관리(선택적). 에러 처리 및 재시도 로직.",
      "testStrategy": "응답 편집 기능 테스트, 미리보기 기능 검증, 확인 모달 테스트, API 연동 테스트, 성공/실패 피드백 UI 테스트, 에러 처리 테스트",
      "priority": "medium",
      "dependencies": [
        13,
        15,
        16,
        17
      ],
      "status": "pending",
      "subtasks": [],
      "complexityScore": 7
    },
    {
      "id": 20,
      "title": "Freshdesk 사용자 컨텍스트 연동 및 앱/API 접근 제어 (MVP)",
      "description": "Freshdesk 환경에서 이미 인증된 사용자 세션을 활용하고, 백엔드 API 호출 시 Freshdesk Signed Request 또는 유사한 메커니즘을 통해 요청을 검증합니다. MVP 범위에서는 복잡한 역할 기반 접근 제어(RBAC) 대신 기본적인 앱 접근 권한 확인 및 `company_id` 기반 데이터 격리 검증에 중점을 둡니다. Freshdesk 앱의 보안 요구사항을 준수합니다.",
      "status": "pending",
      "dependencies": [
        6,
        13
      ],
      "priority": "high",
      "details": "- Freshdesk 사용자 정보(ID, 이메일, `company_id`, 역할 등)를 프론트엔드에서 백엔드로 안전하게 전달하는 방법 연구 및 설계 (예: Freshdesk `request` API 활용).\\n- 백엔드 API 요청 시 Freshdesk Signed Request 검증 로직 구현 또는 서버리스 환경의 경우 Freshdesk에서 발급한 토큰 기반 검증 로직 구현.\\n- 각 API 엔드포인트에서 `company_id`를 추출하고, 이를 기반으로 데이터 접근 권한을 확인하는 로직 통합 (Qdrant 검색 시 `company_id` 필터링 등).\\n- (MVP 범위) 기본적인 앱 사용 권한 확인 로직 구현 (예: 특정 Freshdesk 그룹 사용자만 접근 허용).\\n- 민감 정보(API 키 등)가 클라이언트에 노출되지 않도록 서버 사이드에서 관리.\\n- 모든 인증/권한 부여 로직에 대한 상세한 한글 주석 및 로깅 필수.",
      "testStrategy": "- Freshdesk 사용자 컨텍스트 정보(user_id, account_id/company_id)가 백엔드로 올바르게 전달되고 사용되는지 테스트.\\n- 유효하지 않은 요청(서명 오류, 토큰 오류, 권한 없는 사용자)에 대한 API 접근 거부 테스트 (401/403 에러 반환).\\n- `company_id`가 다른 사용자가 타 회사의 데이터에 접근할 수 없는지 격리 테스트 (API 레벨 및 데이터베이스 쿼리 레벨).\\n- Freshdesk Signed Request 검증 로직의 정확성 및 보안성 검토.",
      "subtasks": [
        {
          "id": "20.1",
          "title": "Freshdesk 사용자 정보 백엔드 전달 방식 설계",
          "description": "Freshdesk FDK의 `request` API 또는 유사 기능을 활용하여 사용자 ID, `company_id` 등의 정보를 백엔드로 안전하게 전달하는 방식 설계",
          "status": "pending"
        },
        {
          "id": "20.2",
          "title": "백엔드 API 요청 검증 로직 구현 (Signed Request 또는 토큰 기반)",
          "description": "FastAPI 미들웨어 또는 의존성 주입을 사용하여 Freshdesk Signed Request 검증 또는 토큰 기반 요청 검증 로직 구현",
          "status": "pending"
        },
        {
          "id": "20.3",
          "title": "`company_id` 기반 데이터 접근 제어 로직 통합",
          "description": "모든 핵심 API 엔드포인트 및 서비스 로직에 `company_id` 기반 데이터 필터링 및 접근 제어 로직 통합",
          "status": "pending"
        },
        {
          "id": "20.4",
          "title": "기본적인 앱 사용 권한 확인 로직 구현 (MVP)",
          "description": "특정 Freshdesk 사용자 그룹 또는 역할에 따른 기본적인 앱 사용 권한 확인 로직 구현 (선택적, MVP 범위 내)",
          "status": "pending"
        },
        {
          "id": "20.5",
          "title": "인증/권한 부여 관련 단위 테스트 및 통합 테스트 작성",
          "description": "구현된 인증 및 권한 부여 로직에 대한 단위 테스트 및 통합 테스트 작성",
          "status": "pending"
        }
      ]
    },
    {
      "id": 21,
      "title": "MVP 성능 기준 설정 및 기본 로깅/모니터링 구축",
      "description": "MVP 단계에서 핵심 API 엔드포인트의 응답 시간 목표를 설정하고, 기본적인 성능 지표(응답 시간, 에러율) 로깅을 구현합니다. Qdrant 및 LLM API 호출에 대한 로깅을 강화하여 병목 지점을 식별할 수 있도록 합니다. 구조화된 로깅을 사용하여 로그 분석을 용이하게 합니다.",
      "status": "pending",
      "dependencies": [
        1,
        6
      ],
      "priority": "medium",
      "details": "- 주요 API 엔드포인트 (`/init`, `/query`)의 평균 응답 시간 목표 설정 (예: 2초 이내).\\n- FastAPI 미들웨어를 사용하여 각 요청의 처리 시간 로깅.\\n- Qdrant 검색 호출 시간 및 LLM API 호출 시간 상세 로깅 (요청 파라미터, 응답 상태 포함).\\n- 주요 에러 발생 빈도 및 유형 로깅.\\n- `company_id`별 API 사용량 및 성능 지표 기본 로깅 (분석 용도).\\n- (MVP 이후) Prometheus, Grafana 또는 클라우드 제공 모니터링 서비스(예: AWS CloudWatch, Azure Monitor) 연동 계획 수립.",
      "testStrategy": "- 간단한 부하 테스트를 통해 설정된 MVP 성능 목표(응답 시간) 달성 여부 확인.\\n- 로깅된 성능 지표(응답 시간, Qdrant/LLM 호출 시간, 에러율)의 정확성 및 유용성 검증.\\n- 다양한 조건(정상, 에러, 높은 부하)에서 로깅 시스템이 정상 동작하는지 확인.",
      "subtasks": [
        {
          "id": "21.1",
          "title": "주요 API 엔드포인트 응답 시간 로깅 구현",
          "description": "FastAPI 미들웨어를 활용하여 `/init`, `/query` 등 주요 API의 요청 시작/종료 시간 및 처리 시간 로깅",
          "status": "pending"
        },
        {
          "id": "21.2",
          "title": "Qdrant 및 LLM API 호출 시간 상세 로깅 추가",
          "description": "Qdrant 클라이언트 및 LLM Router/Orchestrator 내부에 각 외부 API 호출 시간 및 주요 파라미터 로깅 추가",
          "status": "pending"
        },
        {
          "id": "21.3",
          "title": "구조화된 에러 로깅 강화",
          "description": "발생한 예외 정보(타입, 메시지, 스택 트레이스 일부)와 함께 요청 컨텍스트(request_id, company_id)를 포함하는 구조화된 에러 로깅 구현",
          "status": "pending"
        },
        {
          "id": "21.4",
          "title": "기본 성능 지표(에러율, 평균 응답 시간) 집계 방안 검토 (MVP)",
          "description": "로그 기반으로 간단하게 주요 성능 지표를 집계하거나 확인할 수 있는 방안 검토 (예: 특정 로그 패턴 검색)",
          "status": "pending"
        }
      ]
    },
    {
      "id": 22,
      "title": "핵심 기능 단위/통합 테스트 커버리지 확보 (MVP)",
      "description": "MVP 범위 내 핵심 기능(데이터 수집, 임베딩, 검색, LLM 연동, 주요 API, 인증/권한)에 대한 단위 테스트 및 통합 테스트를 작성하여 코드 안정성을 확보합니다. Freshdesk API, Qdrant, LLM API 등 외부 의존성은 모킹(mocking)하여 테스트 환경의 독립성과 실행 속도를 보장합니다.",
      "status": "pending",
      "dependencies": [
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        20
      ],
      "priority": "medium",
      "details": "- 테스트 프레임워크: `pytest` 사용.\\n- 모킹 라이브러리: `unittest.mock` 또는 `pytest-mock` 사용.\\n- 단위 테스트 대상:\\n    - `core` 모듈: `ContextBuilder`, `Retriever`, `LLMOrchestrator`, `LLMRouter` 등 핵심 로직.\\n    - `freshdesk` 모듈: 데이터 fetcher, processor 등 (Freshdesk API 모킹).\\n    - `data` 모듈: Qdrant 핸들러 (Qdrant 클라이언트 모킹), 임베딩 파이프라인 (OpenAI API 모킹).\\n    - `api/endpoints/`: 각 엔드포인트 로직 (서비스 계층 모킹).\\n    - 인증/권한 부여 로직 (`core/auth.py` 또는 미들웨어).\\n- 통합 테스트 대상:\\n    - 주요 API 엔드포인트 (`/init`, `/query`) 전체 흐름 테스트 (내부 서비스는 실제 객체 사용, 외부 API는 모킹).\\n    - 데이터 수집부터 Qdrant 저장까지의 파이프라인 통합 테스트.\\n- 테스트 커버리지 목표 설정 (예: 주요 모듈 70% 이상).",
      "testStrategy": "- `pytest`를 사용하여 모든 테스트 케이스 실행 및 성공 여부 확인.\\n- 모킹된 외부 서비스(Freshdesk, Qdrant, LLM)에 대한 다양한 응답 시나리오(성공, 실패, 특정 데이터 반환) 테스트.\\n- 단위 테스트는 각 함수의 기능적 정확성에 초점, 통합 테스트는 모듈 간 상호작용 및 전체 흐름 검증에 초점.\\n- 테스트 실행 속도 및 안정성 확보.",
      "subtasks": [
        {
          "id": "22.1",
          "title": "`core` 모듈 (ContextBuilder, Retriever, LLMOrchestrator, LLMRouter) 단위 테스트 작성",
          "description": "핵심 비즈니스 로직을 담당하는 `core` 모듈 내 클래스 및 함수들에 대한 단위 테스트 작성 (의존성 모킹)",
          "status": "pending"
        },
        {
          "id": "22.2",
          "title": "`freshdesk` 연동 모듈 단위 테스트 작성",
          "description": "Freshdesk API 데이터 수집 및 처리 로직에 대한 단위 테스트 작성 (Freshdesk SDK 또는 API 호출 모킹)",
          "status": "pending"
        },
        {
          "id": "22.3",
          "title": "`data` 모듈 (Qdrant 핸들러, 임베딩 파이프라인) 단위 테스트 작성",
          "description": "Qdrant 연동 로직 및 OpenAI 임베딩 생성 로직에 대한 단위 테스트 작성 (Qdrant 클라이언트 및 OpenAI API 모킹)",
          "status": "pending"
        },
        {
          "id": "22.4",
          "title": "인증/권한 부여 로직 단위 테스트 작성",
          "description": "Freshdesk Signed Request 검증 또는 토큰 기반 인증 로직 및 `company_id` 기반 권한 부여 로직에 대한 단위 테스트 작성",
          "status": "pending"
        },
        {
          "id": "22.5",
          "title": "주요 API 엔드포인트 (`/init`, `/query`) 통합 테스트 작성",
          "description": "핵심 API 엔드포인트의 전체 요청-응답 흐름에 대한 통합 테스트 작성 (외부 API는 모킹, 내부 서비스는 실제 또는 모킹된 의존성 주입)",
          "status": "pending"
        },
        {
          "id": "22.6",
          "title": "테스트 실행 환경 구성 및 `pytest` 설정",
          "description": "테스트 실행을 위한 환경 구성 (필요시 `pytest.ini` 또는 `pyproject.toml` 설정) 및 테스트 자동 실행 스크립트 마련",
          "status": "pending"
        }
      ]
    },
    {
      "id": 23,
      "title": "MVP 수동 배포 절차 정의 및 기본 배포 스크립트 작성",
      "description": "MVP 단계에서는 완전 자동화된 CI/CD 파이프라인 대신, Docker 이미지를 빌드하고 수동으로 배포하는 절차를 명확히 정의합니다. 간단한 쉘 스크립트를 작성하여 백엔드 Docker 이미지 빌드 및 Freshdesk 앱 패키징 과정을 일부 자동화합니다. 프로덕션 환경과 유사한 스테이징 환경에서의 배포 및 테스트를 권장합니다.",
      "status": "pending",
      "dependencies": [
        1,
        11,
        14
      ],
      "priority": "medium",
      "details": "- **백엔드 배포**:\\n    - 프로덕션용 Docker 이미지 빌드 스크립트 작성 (`docker build -f backend/Dockerfile.prod ...`).\\n    - (선택적) Docker 이미지 레지스트리(예: Docker Hub, AWS ECR, GCP Artifact Registry)에 이미지 푸시 스크립트.\\n    - 서버 환경에 Docker 이미지 배포 및 컨테이너 실행 가이드 (환경 변수 설정 포함).\\n- **프론트엔드(Freshdesk 앱) 배포**:\\n    - Freshdesk 앱 빌드 및 패키징 스크립트 작성 (`fdk pack`).\\n    - 생성된 앱 패키지 (`app.zip`)를 Freshdesk 관리자 포털에 업로드하는 절차 가이드.\\n- **문서화**:\\n    - 전체 수동 배포 절차를 상세히 기술한 `DEPLOYMENT_GUIDE.md` 작성 (환경 요구사항, 각 단계별 명령어, 롤백 절차 등).\\n    - 환경별 설정 파일 관리 방안 정의 (`.env.prod`, `.env.staging` 등).\\n- (MVP 이후) GitHub Actions, GitLab CI, Jenkins 등을 이용한 CI/CD 파이프라인 구축 계획 수립.",
      "testStrategy": "- 작성된 스크립트를 사용하여 백엔드 Docker 이미지 빌드 및 Freshdesk 앱 패키징이 정상적으로 수행되는지 확인.\\n- `DEPLOYMENT_GUIDE.md`에 따라 스테이징 환경(또는 로컬 프로덕션 모드)에 배포 시 문제가 없는지 검증.\\n- 배포된 애플리케이션이 정상적으로 동작하는지 (헬스 체크, 주요 기능) 확인.",
      "subtasks": [
        {
          "id": "23.1",
          "title": "백엔드 프로덕션용 Docker 이미지 빌드 스크립트 작성",
          "description": "최적화된 프로덕션용 Docker 이미지를 빌드하는 쉘 스크립트 작성 (필요시 멀티스테이지 빌드 활용)",
          "status": "pending"
        },
        {
          "id": "23.2",
          "title": "Freshdesk 앱 빌드 및 패키징 스크립트 작성",
          "description": "`fdk validate` 및 `fdk pack` 명령을 포함하는 Freshdesk 앱 빌드 및 패키징 자동화 스크립트 작성",
          "status": "pending"
        },
        {
          "id": "23.3",
          "title": "수동 배포 가이드 문서 (`DEPLOYMENT_GUIDE.md`) 작성",
          "description": "백엔드 및 프론트엔드 배포 절차, 환경 설정, 서버 요구사항, 롤백 방안 등을 포함하는 상세 배포 가이드 작성",
          "status": "pending"
        },
        {
          "id": "23.4",
          "title": "환경별 설정 파일 관리 방안 정의",
          "description": "개발, 스테이징, 프로덕션 환경별 `.env` 파일 관리 및 배포 시 적용 방안 정의",
          "status": "pending"
        },
        {
          "id": "23.5",
          "title": "스테이징 환경 배포 테스트",
          "description": "작성된 스크립트와 가이드를 사용하여 스테이징 환경에 애플리케이션을 배포하고 정상 동작 확인",
          "status": "pending"
        }
      ]
    },
    {
      "id": 24,
      "title": "MVP 내부 사용자 및 운영 가이드 문서화",
      "description": "MVP 기능을 사용하는 내부 사용자(상담원)를 위한 간단한 사용 가이드와 시스템 운영자를 위한 기본 운영 가이드(환경 설정, 배포, 로깅 확인, 간단한 트러블슈팅)를 작성합니다. API 문서는 Swagger/OpenAPI를 통해 자동으로 생성되는 것을 기본으로 하며, 필요한 경우 추가 설명을 보강합니다.",
      "status": "pending",
      "dependencies": [
        6,
        11,
        13,
        23
      ],
      "priority": "medium",
      "details": "- **상담원용 사용자 가이드 (`USER_GUIDE.md` 또는 Wiki)**:\\n    - 앱 설치 및 기본 화면 구성 설명.\\n    - 주요 기능 사용 방법 안내 (`/init` 정보 확인, `/query`를 통한 질의 방법, 마크다운 결과 해석 등).\\n    - 자주 묻는 질문(FAQ) 및 간단한 팁.\\n- **시스템 운영 가이드 (`OPERATIONS_GUIDE.md` 또는 Wiki)**:\\n    - 시스템 아키텍처 개요.\\n    - 설치 및 환경 설정 방법 (백엔드, 프론트엔드, `iparams.json` 설정 포함).\\n    - 배포 절차 (위 `DEPLOYMENT_GUIDE.md` 링크 또는 요약).\\n    - 로깅 확인 및 분석 방법 (주요 로그 위치, 형식, 확인 사항).\\n    - 간단한 트러블슈팅 가이드 (자주 발생하는 문제 및 해결 방법).\\n    - 데이터 백업 및 복구 절차 (Qdrant 해당 시).\\n- **API 문서**: FastAPI의 Swagger/OpenAPI 자동 생성 문서를 검토하고, 각 엔드포인트 및 Pydantic 모델에 대한 한글 설명을 `description` 필드에 충실히 작성하여 가독성을 높입니다.\\n- 모든 문서는 `docs/` 폴더에 마크다운 형식으로 관리하거나 프로젝트 Wiki를 활용합니다.",
      "testStrategy": "- 작성된 사용자 가이드 및 운영 가이드의 명확성, 정확성, 완전성 검토.\\n- 실제 사용자가 가이드만으로 앱 사용 및 기본 운영(설치, 설정, 로그 확인 등)이 가능한지 확인 (내부 테스트).\\n- Swagger/OpenAPI 문서가 정상적으로 생성되고, 추가된 설명이 API 사용에 도움이 되는지 검토.",
      "subtasks": [
        {
          "id": "24.1",
          "title": "상담원용 앱 사용 가이드 초안 작성",
          "description": "앱의 주요 기능(티켓 정보 확인, 유사 티켓/솔루션 조회, LLM 질의) 사용 방법을 단계별로 설명하는 사용자 가이드 작성",
          "status": "pending"
        },
        {
          "id": "24.2",
          "title": "시스템 운영 가이드 초안 작성",
          "description": "시스템 설치, 환경 설정, 배포, 로깅 확인, 기본 트러블슈팅 방법을 포함하는 운영 가이드 작성",
          "status": "pending"
        },
        {
          "id": "24.3",
          "title": "FastAPI 엔드포인트 및 Pydantic 모델에 Swagger/OpenAPI용 설명 추가",
          "description": "모든 API 엔드포인트의 `@router.operation()` 데코레이터와 Pydantic 모델 필드에 명확한 한글 `description` 추가",
          "status": "pending"
        },
        {
          "id": "24.4",
          "title": "문서 검토 및 피드백 반영",
          "description": "작성된 가이드 및 API 문서에 대해 내부 검토를 진행하고 피드백을 반영하여 개선",
          "status": "pending"
        }
      ]
    },
    {
      "id": 25,
      "title": "MVP 기능 검증 및 내부 릴리즈 준비",
      "description": "MVP 범위로 정의된 모든 기능에 대해 내부 QA(품질 보증)를 진행하고, 발견된 버그를 수정합니다. 내부 사용자(테스터 또는 실제 상담원 일부)를 대상으로 한 시험 운영(UAT - User Acceptance Testing) 및 피드백 수렴 후 내부 릴리즈를 준비합니다. 릴리즈 전 최종 점검 및 릴리즈 노트를 작성합니다.",
      "status": "pending",
      "dependencies": [
        20,
        21,
        22,
        23,
        24
      ],
      "priority": "high",
      "details": "- **내부 QA**:\\n    - MVP 기능 목록 및 요구사항 기반 테스트 케이스 작성.\\n    - 기능 테스트, UI/UX 테스트, 성능 테스트(기본), 보안 테스트(기본) 수행.\\n    - 다양한 시나리오 및 예외 상황 테스트.\\n    - 발견된 버그는 이슈 트래킹 시스템에 등록하고 우선순위에 따라 수정.\\n- **시험 운영 (UAT)**:\\n    - 선정된 내부 사용자 그룹에게 앱을 배포하고 실제 업무 환경에서 사용하도록 안내.\\n    - 사용성, 기능 만족도, 개선 사항 등에 대한 피드백 수집 (설문, 인터뷰 등).\\n    - 수집된 피드백을 분석하여 MVP 릴리즈 또는 차기 버전에 반영할 내용 결정.\\n- **릴리즈 준비**:\\n    - 최종 릴리즈 후보 빌드 생성 (백엔드 Docker 이미지, 프론트엔드 앱 패키지).\\n    - 릴리즈 노트 작성 (포함된 기능, 수정된 버그, 알려진 이슈 등).\\n    - 내부 릴리즈 공지 및 배포.",
      "testStrategy": "- 모든 MVP 기능 테스트 케이스 통과 및 주요 버그 수정 완료 확인.\\n- UAT 결과 분석 및 중요한 피드백 반영 여부 검토.\\n- 릴리즈 후보 빌드의 안정성 및 배포 준비 상태 최종 점검.\\n- 릴리즈 노트의 정확성 및 완전성 확인.",
      "subtasks": [
        {
          "id": "25.1",
          "title": "MVP 기능 기반 테스트 케이스 상세 작성",
          "description": "요구사항 명세서 및 각 작업의 `testStrategy`를 기반으로 MVP 범위의 모든 기능에 대한 상세 테스트 케이스 작성",
          "status": "pending"
        },
        {
          "id": "25.2",
          "title": "내부 QA 수행 및 버그 수정",
          "description": "작성된 테스트 케이스에 따라 내부 QA를 체계적으로 수행하고, 발견된 버그를 추적 및 수정",
          "status": "pending"
        },
        {
          "id": "25.3",
          "title": "시험 운영(UAT) 계획 수립 및 사용자 그룹 선정",
          "description": "UAT 목표, 기간, 방법, 피드백 수집 방식 등을 포함한 계획 수립 및 시험 운영에 참여할 내부 사용자 그룹 선정",
          "status": "pending"
        },
        {
          "id": "25.4",
          "title": "시험 운영(UAT) 진행 및 피드백 수집/분석",
          "description": "선정된 사용자를 대상으로 UAT를 진행하고, 정량적/정성적 피드백을 수집하여 분석",
          "status": "pending"
        },
        {
          "id": "25.5",
          "title": "릴리즈 노트 초안 작성 (MVP 버전)",
          "description": "MVP 릴리즈에 포함된 주요 기능, 개선 사항, 수정된 버그, 알려진 이슈 등을 정리하여 릴리즈 노트 초안 작성",
          "status": "pending"
        },
        {
          "id": "25.6",
          "title": "최종 릴리즈 점검 및 승인",
          "description": "QA 결과, UAT 피드백, 릴리즈 노트 등을 종합적으로 검토하여 내부 릴리즈 최종 승인",
          "status": "pending"
        }
      ]
    }
  ]
}