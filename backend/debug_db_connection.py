#!/usr/bin/env python3
"""
Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÎîîÎ≤ÑÍπÖ Ïä§ÌÅ¨Î¶ΩÌä∏
"""

import os
import sys
import logging
from pathlib import Path

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏Î•º Python pathÏóê Ï∂îÍ∞Ä
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from core.database.manager import get_db_manager
from core.repositories.integrated_object_repository import IntegratedObjectRepository

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def debug_database_connection():
    """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÎîîÎ≤ÑÍπÖ"""
    
    try:
        company_id = "debug_test_company"
        
        # Ï≤´ Î≤àÏß∏ DB Îß§ÎãàÏ†Ä ÏÉùÏÑ±
        logger.info("=" * 50)
        logger.info("üîç Ï≤´ Î≤àÏß∏ DB Îß§ÎãàÏ†Ä ÏÉùÏÑ±")
        db_manager1 = get_db_manager(company_id)
        logger.info(f"DB URL: {db_manager1.database_url}")
        logger.info(f"Engine: {db_manager1.engine}")
        
        # Îëê Î≤àÏß∏ DB Îß§ÎãàÏ†Ä ÏÉùÏÑ±
        logger.info("=" * 50)
        logger.info("üîç Îëê Î≤àÏß∏ DB Îß§ÎãàÏ†Ä ÏÉùÏÑ±")
        db_manager2 = get_db_manager(company_id)
        logger.info(f"DB URL: {db_manager2.database_url}")
        logger.info(f"Engine: {db_manager2.engine}")
        
        # Í∞ôÏùÄ ÏóîÏßÑÏù∏ÏßÄ ÌôïÏù∏
        logger.info(f"Í∞ôÏùÄ ÏóîÏßÑ? {db_manager1.engine is db_manager2.engine}")
        logger.info(f"Í∞ôÏùÄ URL? {db_manager1.database_url == db_manager2.database_url}")
        
        # ÌÖåÏù¥Î∏î ÏÉùÏÑ±
        db_manager1.create_database()
        
        # Ï≤´ Î≤àÏß∏ ÏÑ∏ÏÖòÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
        logger.info("=" * 50)
        logger.info("üíæ Ï≤´ Î≤àÏß∏ ÏÑ∏ÏÖòÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•")
        
        test_data = {
            'original_id': 'debug_test_123',
            'company_id': company_id,
            'platform': 'freshdesk',
            'object_type': 'integrated_ticket',
            'original_data': {'test': 'debug_data'},
            'integrated_content': 'Debug test content',
            'tenant_metadata': {'debug': True}
        }
        
        with db_manager1.get_session() as session1:
            repo1 = IntegratedObjectRepository(session1)
            created_obj = repo1.create(test_data)
            logger.info(f"‚úÖ Í∞ùÏ≤¥ ÏÉùÏÑ±: ID={created_obj.id}")
            
            # Í∞ôÏùÄ ÏÑ∏ÏÖòÏóêÏÑú Ï¶âÏãú Ï°∞Ìöå
            found_in_same_session = repo1.get_by_original_id(
                company_id=company_id,
                original_id='debug_test_123'
            )
            logger.info(f"Í∞ôÏùÄ ÏÑ∏ÏÖò Ï°∞Ìöå: {'ÏÑ±Í≥µ' if found_in_same_session else 'Ïã§Ìå®'}")
        
        # Îëê Î≤àÏß∏ ÏÑ∏ÏÖòÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
        logger.info("=" * 50)
        logger.info("üîç Îëê Î≤àÏß∏ ÏÑ∏ÏÖòÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå")
        
        with db_manager2.get_session() as session2:
            repo2 = IntegratedObjectRepository(session2)
            
            # Î™®Îì† Í∞ùÏ≤¥ Ï°∞Ìöå
            all_objects = repo2.get_by_company(company_id)
            logger.info(f"Ï†ÑÏ≤¥ Í∞ùÏ≤¥ Ïàò: {len(all_objects)}")
            
            # ÌäπÏ†ï Í∞ùÏ≤¥ Ï°∞Ìöå
            found_in_new_session = repo2.get_by_original_id(
                company_id=company_id,
                original_id='debug_test_123'
            )
            logger.info(f"ÏÉà ÏÑ∏ÏÖò Ï°∞Ìöå: {'ÏÑ±Í≥µ' if found_in_new_session else 'Ïã§Ìå®'}")
        
        # ÏßÅÏ†ë SQL ÏøºÎ¶¨Î°ú ÌôïÏù∏
        logger.info("=" * 50)
        logger.info("üîç ÏßÅÏ†ë SQL ÏøºÎ¶¨Î°ú Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏")
        
        with db_manager1.get_session() as session:
            result = session.execute("SELECT COUNT(*) FROM integrated_objects")
            count = result.scalar()
            logger.info(f"ÏßÅÏ†ë SQL Ïπ¥Ïö¥Ìä∏: {count}")
            
            if count > 0:
                result = session.execute("SELECT original_id, company_id FROM integrated_objects LIMIT 5")
                rows = result.fetchall()
                for row in rows:
                    logger.info(f"  - {row}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå ÎîîÎ≤ÑÍπÖ Ïã§Ìå®: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    debug_database_connection()
