#!/usr/bin/env python3
"""
ORM 통합 테스트

ORM 기반 저장/조회 기능을 테스트합니다.
"""

import os
import sys
import logging
from pathlib import Path

# 프로젝트 루트를 Python path에 추가
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from core.database.manager import get_db_manager
from core.repositories.integrated_object_repository import IntegratedObjectRepository

# 로깅 설정
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_orm_basic():
    """기본 ORM 테스트"""
    
    try:
        logger.info("🔍 ORM 기본 테스트 시작")
        
        # 테스트용 데이터베이스 매니저 생성
        db_manager = get_db_manager("test_company")
        
        # 테이블 생성
        logger.info("📋 테이블 생성 중...")
        db_manager.create_database()
        
        # 기존 테스트 데이터 정리
        logger.info("🧹 기존 테스트 데이터 정리...")
        with db_manager.get_session() as session:
            repo = IntegratedObjectRepository(session)
            # 기존 테스트 데이터 삭제
            existing_obj = repo.get_by_original_id(
                company_id='test_company',
                original_id='test_123'
            )
            if existing_obj:
                session.delete(existing_obj)
                session.commit()
                logger.info("✅ 기존 테스트 데이터 삭제 완료")
        
        # 테스트 데이터 생성
        test_data = {
            'original_id': 'test_123',
            'company_id': 'test_company',
            'platform': 'freshdesk',
            'object_type': 'integrated_ticket',
            'original_data': {'test': 'data', 'subject': 'Test Ticket'},
            'integrated_content': 'This is a test ticket content',
            'tenant_metadata': {
                'has_attachments': False,
                'conversation_count': 1,
                'subject': 'Test Ticket'
            }
        }
        
        # 데이터 저장 테스트
        with db_manager.get_session() as session:
            repo = IntegratedObjectRepository(session)
            
            logger.info("💾 데이터 저장 테스트...")
            created_obj = repo.create(test_data)
            logger.info(f"✅ 객체 생성됨: ID={created_obj.id}")
            
            # 조회 테스트
            logger.info("🔍 데이터 조회 테스트...")
            found_obj = repo.get_by_original_id(
                company_id='test_company',
                original_id='test_123'
            )
            
            if found_obj:
                logger.info(f"✅ 객체 조회됨: {found_obj.original_id}")
                logger.info(f"   - 제목: {found_obj.tenant_metadata.get('subject', 'N/A') if found_obj.tenant_metadata else 'N/A'}")
                logger.info(f"   - 생성일: {found_obj.created_at}")
            else:
                logger.error("❌ 객체 조회 실패")
                return False
            
            # 요약 업데이트 테스트
            logger.info("📝 요약 업데이트 테스트...")
            success = repo.update_summary(
                obj_id=created_obj.id,
                summary="This is a test summary generated by ORM test"
            )
            
            if success:
                logger.info("✅ 요약 업데이트 성공")
            else:
                logger.error("❌ 요약 업데이트 실패")
                return False
        
        logger.info("🎉 모든 ORM 테스트 성공!")
        return True
        
    except Exception as e:
        logger.error(f"❌ ORM 테스트 실패: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_migration_layer():
    """마이그레이션 레이어 테스트"""
    
    try:
        logger.info("🔄 마이그레이션 레이어 테스트 시작")
        
        # 환경변수 설정 (ORM 사용)
        os.environ['USE_ORM'] = 'true'
        logger.info(f"🔧 환경변수 설정: USE_ORM={os.getenv('USE_ORM')}")
        
        # 마이그레이션 레이어 리셋 (환경변수 적용을 위해)
        from core.migration_layer import get_migration_layer
        # 전역 인스턴스 리셋
        import core.migration_layer
        core.migration_layer._migration_layer = None
        logger.info("🔄 마이그레이션 레이어 인스턴스 리셋 완료")
        
        # 기존 테스트 데이터 정리
        logger.info("🧹 마이그레이션 테스트 데이터 정리...")
        db_manager = get_db_manager("migration_test_company")
        db_manager.create_database()
        
        with db_manager.get_session() as session:
            repo = IntegratedObjectRepository(session)
            existing_obj = repo.get_by_original_id(
                company_id='migration_test_company',
                original_id='migration_test_456'
            )
            if existing_obj:
                session.delete(existing_obj)
                session.commit()
                logger.info("✅ 기존 마이그레이션 테스트 데이터 삭제 완료")
        
        from core.migration_layer import store_integrated_object_with_migration
        
        # 테스트 통합 객체
        integrated_object = {
            'id': 'migration_test_456',
            'object_id': 'migration_test_456',  # object_id 필드 추가
            'object_type': 'integrated_ticket',
            'subject': 'Migration Test Ticket',
            'integrated_text': 'This is a test ticket for migration layer',
            'all_attachments': [
                {
                    'id': 'att_1',
                    'name': 'test.pdf',
                    'content_type': 'application/pdf',
                    'size': 1024
                }
            ],
            'conversations': [
                {
                    'id': 'conv_1',
                    'body_text': 'Test conversation',
                    'from_email': 'test@example.com'
                }
            ]
        }
        
        # 마이그레이션 레이어를 통한 저장
        logger.info("💾 마이그레이션 레이어 저장 테스트...")
        logger.info(f"🔍 USE_ORM 환경변수: {os.getenv('USE_ORM')}")
        
        success = store_integrated_object_with_migration(
            integrated_object=integrated_object,
            company_id='migration_test_company',
            platform='freshdesk'
        )
        
        if success:
            logger.info("✅ 마이그레이션 레이어 저장 성공")
        else:
            logger.error("❌ 마이그레이션 레이어 저장 실패")
            return False
        
        # 새로운 DB 매니저와 세션으로 조회 (완전히 분리된 세션)
        logger.info("🔍 새로운 세션으로 조회 테스트...")
        verification_db_manager = get_db_manager("migration_test_company")
        with verification_db_manager.get_session() as verification_session:
            verification_repo = IntegratedObjectRepository(verification_session)
            
            # 모든 객체 조회로 디버깅
            all_objects = verification_repo.get_by_company('migration_test_company')
            logger.info(f"🔍 저장된 전체 객체 수: {len(all_objects)}")
            
            for obj in all_objects:
                logger.info(f"   - ID: {obj.id}, original_id: {obj.original_id}, object_type: {obj.object_type}")
                logger.info(f"   - company_id: {obj.company_id}, platform: {obj.platform}")
            
            # 특정 객체 조회
            found_obj = verification_repo.get_by_original_id(
                company_id='migration_test_company',
                original_id='migration_test_456'
            )
            
            if found_obj:
                logger.info(f"✅ 마이그레이션된 객체 확인: {found_obj.original_id}")
                logger.info(f"   - 첨부파일 수: {found_obj.tenant_metadata.get('attachment_count', 0) if found_obj.tenant_metadata else 0}")
                logger.info(f"   - 대화 수: {found_obj.tenant_metadata.get('conversation_count', 0) if found_obj.tenant_metadata else 0}")
                logger.info(f"   - 제목: {found_obj.tenant_metadata.get('subject') if found_obj.tenant_metadata else 'N/A'}")
            else:
                logger.error("❌ 마이그레이션된 객체 조회 실패")
                logger.error("   모든 객체를 조회했지만 해당 객체를 찾을 수 없습니다.")
                return False
        
        logger.info("🎉 마이그레이션 레이어 테스트 성공!")
        return True
        
    except Exception as e:
        logger.error(f"❌ 마이그레이션 레이어 테스트 실패: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """메인 테스트 함수"""
    
    logger.info("=" * 60)
    logger.info("🚀 ORM 통합 테스트 시작")
    logger.info("=" * 60)
    
    # 기본 ORM 테스트
    if not test_orm_basic():
        logger.error("❌ 기본 ORM 테스트 실패")
        return 1
    
    print()
    
    # 마이그레이션 레이어 테스트
    if not test_migration_layer():
        logger.error("❌ 마이그레이션 레이어 테스트 실패")
        return 1
    
    logger.info("=" * 60)
    logger.info("🎉 모든 테스트 성공! ORM 통합 준비 완료")
    logger.info("=" * 60)
    
    print("\n📝 다음 단계:")
    print("1. USE_ORM=true 환경변수 설정")
    print("2. 기존 processor.py에서 ORM 저장 테스트")  
    print("3. 점진적으로 전체 시스템에 ORM 적용")
    
    return 0


if __name__ == "__main__":
    exit(main())
