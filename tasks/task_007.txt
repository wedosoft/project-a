# Task ID: 7
# Title: /init/{ticket_id} 엔드포인트 구현
# Status: pending
# Dependencies: 2, 3, 4, 5, 6
# Priority: high
# Description: LLM에 전달할 최적의 컨텍스트를 구성하는 Context Builder 모듈을 `core/context_builder.py`에 구현합니다. 이 모듈은 `/init` 및 `/query` API 요청에 따라 다양한 소스(티켓 정보, 유사 티켓, 기술 자료, 사용자 질문 등)로부터 컨텍스트를 조합합니다.
# Details:
- `core/context_builder.py`에 `ContextBuilder` 클래스 또는 관련 함수들을 구현합니다.
- 주요 기능:
    - 현재 티켓 정보(요약, 주요 내용)를 컨텍스트에 포함합니다.
    - Retriever 모듈을 사용하여 검색된 유사 티켓 및 관련 기술 자료를 컨텍스트에 추가합니다.
    - 사용자의 질문(`query_text`)을 컨텍스트에 명확하게 포함시킵니다.
    - 컨텍스트의 총 길이를 LLM의 최대 토큰 제한에 맞게 동적으로 조절합니다 (중요도 기반으로 정보 필터링/요약).
    - 컨텍스트 구성 시 프롬프트 엔지니어링 기법을 적용하여 LLM이 더 정확하고 관련성 높은 답변을 생성하도록 유도합니다.
    - `context_type` (예: 'similar_tickets_only', 'solutions_only', 'full_rag')에 따라 컨텍스트 구성 전략을 다르게 적용할 수 있도록 유연하게 설계합니다.
    - `company_id`를 고려하여 해당 회사의 데이터만 컨텍스트 구성에 사용하도록 합니다.
- Retriever 모듈(`core/retriever.py`) 및 LLM Orchestrator(`core/llm_orchestrator.py`)와 긴밀하게 협력합니다.
- 모든 코드에는 상세한 한글 주석을 필수로 작성합니다.

# Test Strategy:
- 다양한 입력(티켓 정보, 검색 결과, 사용자 질문)에 따른 컨텍스트 구성 결과 검증.
- 컨텍스트 길이 조절 로직 테스트 (토큰 제한 초과 여부, 정보 누락 최소화).
- `context_type`에 따른 컨텍스트 구성 변화 확인.
- 프롬프트 엔지니어링 적용 결과 (LLM 응답 품질 변화) 간접적 평가.
- `company_id`에 따른 데이터 격리 검증.
- Retriever 모듈과의 연동 테스트.

# Subtasks:
## 7.1. `ContextBuilder` 클래스 또는 핵심 함수 기본 구조 설계 및 구현 [pending]
### Dependencies: None
### Description: `core/context_builder.py`에 Context Builder 모듈의 기본 구조를 설계하고 구현합니다.
### Details:


## 7.2. 현재 티켓 정보를 컨텍스트에 추가하는 로직 구현 [pending]
### Dependencies: None
### Description: 티켓 요약 및 주요 내용을 컨텍스트에 포함시키는 기능을 구현합니다.
### Details:


## 7.3. 유사 티켓 목록을 컨텍스트에 통합하는 로직 구현 [pending]
### Dependencies: None
### Description: Retriever로부터 받은 유사 티켓 정보를 컨텍스트에 효과적으로 통합하는 로직을 구현합니다.
### Details:


## 7.4. 관련 기술 자료 목록을 컨텍스트에 통합하는 로직 구현 [pending]
### Dependencies: None
### Description: Retriever로부터 받은 관련 기술 자료를 컨텍스트에 통합하는 로직을 구현합니다.
### Details:


## 7.5. 사용자 질문을 컨텍스트에 포함시키는 로직 구현 [pending]
### Dependencies: None
### Description: 사용자의 질문(`query_text`)을 컨텍스트에 명확하게 포함시키는 로직을 구현합니다.
### Details:


## 7.6. 컨텍스트 길이 동적 조절 및 최적화 로직 구현 [pending]
### Dependencies: None
### Description: LLM의 최대 토큰 제한을 고려하여 컨텍스트 길이를 동적으로 조절하고, 중요도 기반으로 정보를 필터링/요약하는 로직을 구현합니다.
### Details:


## 7.7. `context_type`에 따른 다양한 컨텍스트 구성 전략 구현 [pending]
### Dependencies: None
### Description: 다양한 컨텍스트 타입(예: 'similar_tickets_only', 'solutions_only', 'full_rag')에 따라 컨텍스트 구성 전략을 다르게 적용하는 로직을 구현합니다.
### Details:


## 7.8. 프롬프트 엔지니어링 기법 적용 [pending]
### Dependencies: None
### Description: 컨텍스트 구성 시 프롬프트 엔지니어링 기법(역할 부여, 명확한 지시사항 추가 등)을 적용하여 LLM이 더 정확한 답변을 생성하도록 유도합니다.
### Details:


## 7.9. `company_id`를 고려한 데이터 필터링 로직 통합 [pending]
### Dependencies: None
### Description: `company_id`를 기반으로 해당 회사의 데이터만 컨텍스트 구성에 사용되도록 필터링 로직을 통합합니다.
### Details:


## 7.1. Context Builder 모듈 단위 테스트 작성 [pending]
### Dependencies: None
### Description: `tests/core/` 디렉토리에 Context Builder 모듈의 기능을 검증하는 단위 테스트를 작성합니다.
### Details:


