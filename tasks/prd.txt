# Product Requirements Document (PRD)
# Prompt Canvas - Freshdesk Custom App (자연어 기반 상담사 지원 시스템)

## 1. 프로젝트 개요

### 1.1 제품 비전
Freshdesk 상담사를 위한 자연어 기반 AI 응답 지원 시스템으로, 상담사가 자연어로 질문/요청을 하면 AI가 유사 티켓·추천 솔루션·이미지·첨부파일을 자동으로 검색하고 제안하는 Freshdesk Custom App 개발

### 1.2 핵심 목표
- 자연어 명령을 통한 직관적인 상담사 지원 시스템 구축
- company_id 기반 멀티테넌트 데이터 분리로 고객사별 보안 보장
- 명시적 트리거 기반 API 호출로 사용자 중심의 작업 흐름 제공
- 3탭 구조(유사 티켓, 추천 솔루션, OO와 대화하기)로 직관적인 UX 구현
- 티켓 응답 직접 등록 기능으로 상담사 업무 효율성 극대화

## 2. 기술 요구사항

### 2.1 백엔드 기술 스택
- **언어**: Python 3.10+
- **프레임워크**: FastAPI (async/await)
- **벡터 DB**: Qdrant Cloud
- **임베딩**: OpenAI Embeddings (text-embedding-3-small)
- **LLM**: Anthropic Claude, OpenAI GPT, Google Gemini (LLM Router 패턴)
- **컨테이너**: Docker, docker-compose
- **외부 API**: Freshdesk API
- **한글 주석**: 모든 코드 주석과 문서화는 한글로 작성

### 2.2 프론트엔드 기술 스택
- **플랫폼**: Freshdesk FDK (Freshdesk Developer Kit)
- **상태관리**: Zustand 또는 React Context
- **캐싱**: localStorage 또는 메모리 캐시 (프론트엔드 초기 데이터 로딩 최적화)
- **UI 구성**: 2개 주요 영역 (상단: 티켓 요약 카드, 하단: 3탭 영역 - 유사 티켓, 추천 솔루션, OO와 대화하기)
- **Node.js 버전 관리**: 프로젝트 루트에 `.nvmrc` 파일을 사용하여 Node.js 버전 명시 및 `nvm` 또는 `volta`와 같은 버전 관리 도구 사용 권장 (글로벌 Node.js 환경 변경 지양)

### 2.3 아키텍처 설계 원칙
- **모듈식 설계**: 백엔드는 API Layer, Context Builder, Retriever, LLM Orchestrator, Response Assembler로 명확히 분리
- **함수형 모듈 분리**: 모든 핵심 서비스는 독립적이고 재사용 가능한 함수형 모듈로 구성
- **명시적 트리거**: 모든 API 호출은 사용자의 명시적인 액션(예: 버튼 클릭)에 의해서만 실행 (자동 API 호출 최소화)
- **company_id 기반 분리**: 고객사별 데이터 완전 격리 및 보안 보장 (Qdrant 컬렉션 및 API 요청 시 `company_id` 활용)
- **비동기 처리**: FastAPI의 `async/await`를 적극 활용하여 높은 동시성 처리 능력 확보
- **환경변수 관리**: 모든 주요 설정(API 키, DB 접속 정보 등)은 환경변수를 통해 관리

### 2.4 개발 환경 및 운영
- **백엔드**: Docker 컨테이너 기반으로 운영 (Dockerfile 및 docker-compose.yml에 명시적 버전 지정)
- **Python 가상환경**: `venv` 또는 `conda` 등을 사용하여 프로젝트별 Python 패키지 격리
- **Node.js 가상환경**: `nvm` 또는 `volta`를 사용하여 프로젝트별 Node.js 버전 관리
- **문서화 및 주석**:
    - 모든 코드의 주석과 설명은 **한글**로 작성 (가독성 및 유지보수성 향상)
    - 함수/클래스에는 상세한 Docstring 작성
    - 복잡한 로직 및 비즈니스 규칙에는 인라인 주석으로 상세 설명 추가
- **커뮤니케이션**: 모든 논의와 문서는 한국어로 진행하며, 정중한 표현 사용. 불확실한 내용은 반드시 확인 후 진행.

## 3. 핵심 기능 명세

### 3.1 백엔드 API 엔드포인트

#### 3.1.1 `GET /init/{ticket_id}`
- **설명**: 프론트엔드 앱 최초 로딩 시 호출되어 티켓 요약, 유사 티켓 목록, 추천 솔루션 목록 등 초기 데이터를 한 번에 제공합니다. `ticket_id`는 현재 상담사가 조회 중인 Freshdesk 티켓의 ID입니다.
- **요청**: 경로 파라미터로 `ticket_id` 전달. 필요시 `company_id`는 헤더 또는 JWT 토큰에서 추출.
- **처리 흐름**:
    1.  Freshdesk API를 통해 `ticket_id`에 해당하는 티켓 상세 정보 조회.
    2.  LLM을 사용하여 티켓 내용 요약 (에이전트용 요약).
    3.  내부적으로 `/similar_tickets` 로직을 호출하여 유사 티켓 검색.
    4.  내부적으로 `/related_docs` 로직을 호출하여 관련 솔루션/문서 검색.
    5.  생성된 요약, 유사 티켓 목록, 추천 솔루션 목록을 통합하여 JSON 형태로 응답.
- **응답**: 티켓 요약, 유사 티켓 리스트, 추천 솔루션 리스트 등을 포함하는 JSON 객체.

#### 3.1.2 `POST /query`
- **설명**: "OO와 대화하기" 탭에서 사용자의 자연어 질문과 검색 대상 콘텐츠 타입을 받아 처리하고, 해당 조건에 맞는 정보를 검색하거나 LLM을 통해 답변을 생성하여 반환합니다.
- **요청 본문 (JSON)**:
    ```json
    {
      "ticket_id": "현재 Freshdesk 티켓 ID",
      "company_id": "현재 고객사 ID",
      "query_text": "사용자의 자연어 질문 (예: 이 문제 해결 방법 알려줘)",
      "content_types": ["tickets", "solutions", "images", "attachments"], // 사용자가 선택한 검색 대상
      "intent": "search" // 또는 "summarize", "suggest_reply" 등 (확장 가능)
    }
    ```
- **처리 흐름**:
    1.  요청받은 `query_text`와 `ticket_id`를 기반으로 컨텍스트 구성.
    2.  `content_types`에 따라 Qdrant에서 관련 정보 검색 (유사 티켓, 솔루션, 이미지 메타데이터, 첨부파일 메타데이터).
    3.  필요시 LLM Orchestrator를 통해 적절한 프롬프트를 구성하고 LLM 호출.
    4.  검색 결과 및 LLM 응답을 Response Assembler를 통해 프론트엔드가 사용하기 쉬운 JSON 형태로 가공하여 반환.
- **응답**: 대화형 UI에 표시될 답변, 검색 결과 목록 (콘텐츠 타입별로 그룹화) 등을 포함하는 JSON 객체.

#### 3.1.3 `/similar_tickets` (내부 로직 또는 API)
- **설명**: 현재 티켓과 유사한 과거 티켓을 벡터 DB에서 검색합니다. 주로 `/init` 및 `/query` 내부에서 호출됩니다.
- **처리**: 현재 티켓의 내용을 임베딩하여 Qdrant에서 유사도 검색 후 상위 N개 반환.

#### 3.1.4 `/related_docs` (내부 로직 또는 API)
- **설명**: 현재 티켓과 관련된 지식베이스 문서, 솔루션, 이미지, 첨부파일 등을 벡터 DB에서 검색합니다. 주로 `/init` 및 `/query` 내부에서 호출됩니다.
- **처리**: 현재 티켓의 내용을 임베딩하여 Qdrant에서 관련 콘텐츠 타입별로 검색 후 반환.

### 3.2 프론트엔드 UI 구성
#### 3.2.1 상단: 티켓 요약 카드
- **목적**: 상담사가 현재 티켓의 핵심 내용을 빠르게 파악하도록 지원.
- **데이터 소스**: `/init` API 응답 중 티켓 요약 정보.
- **표시 정보**: 문제 상황, 원인 (추정), 주요 조치 내역, 현재 상태 등 LLM이 생성한 요약.
- **UX**: 최초 로딩 시 표시되며, 이후에는 상태 변경 시 업데이트 (필요시).

#### 3.2.2 하단: 3가지 탭 영역
##### 탭 1: 유사 티켓
- **목적**: 현재 티켓과 유사한 과거 티켓 정보를 제공하여 해결책 탐색 지원.
- **데이터 소스**: `/init` API 응답 중 유사 티켓 목록. `/query` API를 통해 추가 검색 가능.
- **표시 정보**: 티켓 제목, 상태, 해결 방법 요약, 관련성 점수 등.
- **UX**: 목록 형태로 제공, 클릭 시 상세 내용 확인 (모달 또는 확장 패널). '답변에 추가' 기능. 페이지네이션 지원.

##### 탭 2: 추천 솔루션
- **목적**: 현재 티켓과 관련된 지식베이스 문서, 솔루션, FAQ 등을 제공.
- **데이터 소스**: `/init` API 응답 중 추천 솔루션 목록. `/query` API를 통해 추가 검색 가능.
- **표시 정보**: 문서 제목, 카테고리, 내용 미리보기, 관련성 점수 등.
- **UX**: 목록 형태로 제공, 클릭 시 상세 내용 확인. '답변에 추가' 기능. 페이지네이션 지원.

##### 탭 3: OO와 대화하기
- **목적**: 자연어 입력을 통해 AI와 상호작용하며 필요한 정보를 얻거나 답변을 생성.
- **입력 UI**:
    - 자연어 입력창 (Placeholder: "궁금한 점을 질문하거나 요청사항을 입력하세요...")
    - 검색 대상 콘텐츠 선택 체크박스 (✅ 티켓, ✅ 솔루션, ✅ 이미지, ✅ 첨부파일)
    - "전송" 또는 "질문하기" 버튼.
- **데이터 소스**: 사용자가 입력한 자연어와 선택한 콘텐츠 타입을 `/query` API로 전송하여 결과 수신.
- **표시 정보**:
    - 사용자의 질문과 AI의 답변을 대화 형식으로 표시.
    - 검색된 정보(티켓, 솔루션, 이미지, 첨부파일)는 카드나 리스트 형태로 명확히 구분하여 제공.
    - 이미지나 첨부파일은 미리보기 또는 다운로드 링크 제공.
- **UX**:
    - '답변에 추가' 또는 '티켓 응답으로 바로 등록' 기능.
    - 응답 내용 복사 기능.
    - 응답 품질 피드백 (좋아요/싫어요) 기능.
    - 로딩 상태, 오류 메시지 명확히 표시.

## 4. 관리자 설정 (iparams.html)

Freshdesk 앱 설치 시 관리자가 설정할 수 있는 항목들입니다.

### 4.1 백엔드 연동 설정
- **LLM 선택**: 기본 LLM 제공자 및 모델 선택 (예: OpenAI GPT-4, Anthropic Claude 3 Sonnet)
- **임베딩 모델**: 사용할 임베딩 모델 확인 (기본값: text-embedding-3-small)
- **데이터 동기화 주기**: Freshdesk 데이터 (티켓, KB)를 Qdrant와 동기화하는 주기 설정 (구현 예정)

### 4.2 기능 설정
- **자연어 명령 인식 범위**: 시스템이 이해하고 처리할 수 있는 자연어 명령의 예시 또는 패턴 안내 (커스터마이징은 어려우므로 가이드 제공).
- **응답 스타일 지침**: AI가 생성하는 답변의 기본 톤앤매너 설정 (예: 공식적, 친근함, 기술적). LLM 프롬프트에 반영.
- **금지 표현 목록**: AI 답변 생성 시 사용을 피해야 할 단어나 문구 목록 (예: "죄송합니다만..." 대신 "안내해 드리겠습니다..."). LLM 프롬프트에 반영.
- **데이터 검색 기간 설정**: 유사 티켓 또는 관련 문서 검색 시 고려할 데이터의 기간 설정 (예: 최근 1개월, 3개월, 6개월, 전체). Qdrant 필터링 조건으로 활용.
- **첨부파일 처리 여부**: 티켓 데이터 수집 시 첨부파일 내용까지 처리하여 검색 대상에 포함할지 여부 (기본값: true).

### 4.3 UI/UX 설정 (프론트엔드)
- **초기 로딩 항목 수**: 유사 티켓 및 추천 솔루션 탭에 최초 로딩 시 보여줄 항목 개수.
- **페이지네이션 단위**: 목록형 데이터의 페이지당 항목 수.

## 5. 비기능적 요구사항

- **성능**: `/init` API는 3초 이내, `/query` API는 5초 이내 응답 목표 (LLM 응답 시간 포함).
- **확장성**: 향후 새로운 LLM 제공자 또는 벡터 DB 추가 용이하도록 설계.
- **보안**: Freshdesk API 키, LLM API 키 등 민감 정보는 안전하게 관리 (환경변수, Vault 등). `company_id` 기반 데이터 접근 제어 철저.
- **안정성**: API 호출 실패 시 적절한 재시도 로직 및 에러 핸들링. Qdrant 연결 실패 시 예외 처리.
- **유지보수성**: 모듈화된 코드, 상세한 주석 및 문서화를 통해 유지보수 용이성 확보.

## 6. 데이터 처리 및 관리

### 6.1 Freshdesk 데이터 수집
- **대상**: 티켓 (설명, 대화 내용, 태그, 사용자 정의 필드 등), 지식베이스 문서 (솔루션, FAQ).
- **처리**: 청크 단위 수집, HTML 태그 제거 등 전처리, 임베딩 생성 후 Qdrant에 저장.
- **첨부파일**: `PROCESS_ATTACHMENTS=true`일 경우, 지원되는 형식(txt, pdf, docx 등)의 텍스트 추출 후 임베딩.
- **업데이트**: 주기적인 동기화 또는 웹훅 기반 실시간 업데이트 (향후 고려).

### 6.2 Qdrant 벡터 DB
- **컬렉션**: `company_id`별로 또는 `company_id`를 메타데이터 필드로 사용하여 논리적 데이터 분리. (예: `kyexpert_tickets`, `kyexpert_solutions`)
- **메타데이터**: 검색 필터링 및 결과 표시에 필요한 정보 (티켓 ID, 문서 ID, 생성일, 상태, 카테고리, 파일명, 파일타입 등) 저장.

## 7. Node.js 버전 및 가상환경 운영 지침 (글로벌 지침 준수)
- 프로젝트별 Node.js 버전 충돌 방지 및 FDK(Freshdesk Developer Kit) 등 특수 목적 Node.js 환경 보존을 위해, **글로벌 Node.js 변경 없이 nvm(Node Version Manager) 또는 volta 등 가상환경 도구 사용을 원칙으로 한다.**
- 프로젝트 내 `.nvmrc` 파일을 활용하여, 개발자는 각 프로젝트에서 요구하는 Node.js 버전을 명확히 지정하고 사용한다.
- FDK 등 특정 Node.js 버전이 필요한 글로벌 환경은 **절대 변경하지 않는다.**
- Python 패키지 역시 프로젝트별 가상환경(`venv`, `conda` 등)에서 관리한다.
