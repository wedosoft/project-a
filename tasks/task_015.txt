# Task ID: 15
# Title: Implement Deployment and CI/CD Configuration
# Status: pending
# Dependencies: 1, 13, 14
# Priority: medium
# Description: Create Docker configurations, deployment scripts, and CI/CD pipeline for automated testing and deployment of the backend service.
# Details:
1. Create production-ready Dockerfile
2. Implement docker-compose for local development
3. Create Kubernetes deployment manifests
4. Set up GitHub Actions or similar CI/CD pipeline
5. Implement automated testing in CI
6. Create deployment scripts for different environments
7. Implement database migration scripts
8. Add configuration for zero-downtime deployments

Example code:
```dockerfile
# Dockerfile
FROM python:3.10-slim

WORKDIR /app

# Install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY ./app /app/

# Set environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PORT=8000

# Run the application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "${PORT}", "--workers", "4"]
```

```yaml
# docker-compose.yml
version: '3.8'

services:
  api:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
    env_file:
      - .env
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  redis_data:
```

```yaml
# GitHub Actions workflow
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          pip install -r requirements.txt
      - name: Run tests
        run: |
          pytest --cov=app tests/

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: username/prompt-canvas:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /opt/prompt-canvas
            docker-compose pull
            docker-compose up -d
```

```yaml
# Kubernetes deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prompt-canvas-api
  labels:
    app: prompt-canvas-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: prompt-canvas-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: prompt-canvas-api
    spec:
      containers:
      - name: api
        image: username/prompt-canvas:latest
        ports:
        - containerPort: 8000
        env:
        - name: PORT
          value: "8000"
        - name: REDIS_URL
          value: "redis://redis:6379/0"
        - name: QDRANT_URL
          valueFrom:
            secretKeyRef:
              name: prompt-canvas-secrets
              key: qdrant_url
        - name: QDRANT_API_KEY
          valueFrom:
            secretKeyRef:
              name: prompt-canvas-secrets
              key: qdrant_api_key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: prompt-canvas-secrets
              key: openai_api_key
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: prompt-canvas-api
spec:
  selector:
    app: prompt-canvas-api
  ports:
  - port: 80
    targetPort: 8000
  type: ClusterIP
```

# Test Strategy:
1. Test Docker build process
2. Verify docker-compose setup works locally
3. Test Kubernetes deployment manifests
4. Validate CI/CD pipeline configuration
5. Test automated deployment process
6. Verify zero-downtime deployment
7. Test rollback procedures
8. Validate environment-specific configurations
