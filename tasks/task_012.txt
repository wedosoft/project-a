# Task ID: 12
# Title: 프론트엔드 응답 표시 및 상태 관리 구현
# Status: pending
# Dependencies: 11
# Priority: high
# Description: 전통적인 HTML/CSS/JavaScript를 사용하여 LLM의 응답을 리치 텍스트 형식으로 표시하고, 사용자 인터랙션을 처리하는 기능을 구현합니다.
# Details:
- 마크다운 라이브러리(marked.js)를 사용하여 LLM 응답을 HTML로 변환하여 표시합니다.
- 'OO와 대화하기' 탭의 대화 내용 표시 영역에 HTML 기반 콘텐츠 렌더링 시스템을 구현합니다.
- 백엔드 `/query` API로부터 받은 LLM 응답을 안전하게 HTML로 파싱하고 표시합니다.
  - marked.js를 사용하여 마크다운 텍스트를 HTML로 변환하는 로직을 구현합니다.
  - XSS 공격 방지를 위한 콘텐츠 새니타이징을 적용합니다.
- LLM 응답에 포함된 코드 블록, 목록, 인용구, 테이블 등의 리치 텍스트 요소가 올바르게 렌더링되도록 합니다.
- 사용자의 메시지 입력 및 편집 기능을 일반 텍스트영역(textarea)으로 구현합니다.
- CSS를 사용하여 Freshdesk UI와 일관된 스타일링을 적용합니다.
- 대화가 길어질 경우 스크롤 처리 및 성능 최적화를 고려합니다.
- 모든 코드에는 상세한 한글 주석을 필수로 작성합니다.
- React를 사용하지 않고 전통적인 HTML/CSS/JavaScript만으로 구현합니다.

# Test Strategy:
- marked.js를 사용한 마크다운-HTML 변환이 정상적으로 작동하는지 확인.
- 백엔드로부터 받은 다양한 형식의 LLM 응답(텍스트, 코드 블록, 목록 등)이 올바르게 HTML로 렌더링되는지 검증.
- XSS 공격 방지를 위한 새니타이징 로직의 효과성 테스트.
- 리치 텍스트 요소(코드 하이라이팅, 목록 들여쓰기 등)의 올바른 렌더링 확인.
- CSS 스타일링 및 UI 일관성 검증.
- 긴 대화 내용에 대한 스크롤 및 성능 테스트.
- 일반 textarea를 통한 사용자 입력 처리가 정상적으로 작동하는지 확인.

# Subtasks:
## 12.1. marked.js 라이브러리 설치 및 프로젝트 설정 [pending]
### Dependencies: None
### Description: 
### Details:


## 12.2. 'OO와 대화하기' 탭 내에 HTML 기반 콘텐츠 렌더링 영역 구현 [pending]
### Dependencies: None
### Description: 
### Details:


## 12.3. marked.js를 사용하여 백엔드 LLM 응답(마크다운)을 안전한 HTML로 변환하는 파서 구현 [pending]
### Dependencies: None
### Description: 
### Details:


## 12.4. LLM 응답의 리치 텍스트 요소(코드 블록, 목록, 인용 등) 렌더링 및 스타일 적용 [pending]
### Dependencies: None
### Description: 
### Details:


## 12.5. 사용자 메시지 입력을 위한 일반 텍스트영역(textarea) 및 전송 버튼 구현 [pending]
### Dependencies: None
### Description: 
### Details:


## 12.6. 대화 내용 표시 영역 CSS 스타일링 (Freshdesk UI와 일관성 유지) [pending]
### Dependencies: None
### Description: 
### Details:


## 12.7. 긴 대화 내용 스크롤 처리 및 성능 최적화 방안 검토 및 적용 [pending]
### Dependencies: None
### Description: 
### Details:


## 12.8. HTML 렌더링 및 XSS 방지 관련 단위 테스트 또는 기능 테스트 작성 [pending]
### Dependencies: None
### Description: 
### Details:


## 9. 마크다운 파싱 구현 [pending]
### Dependencies: None
### Description: 마크다운 텍스트를 파싱하여 HTML 구조로 변환하는 기능 구현
### Details:
마크다운 파서 라이브러리(marked.js, showdown 등) 선택 및 통합, 기본 마크다운 문법(제목, 목록, 링크, 이미지, 코드 블록 등) 지원, 커스텀 마크다운 확장 기능 검토

## 10. HTML 렌더링 구현 [pending]
### Dependencies: 12.9
### Description: 파싱된 마크다운을 안전하게 HTML로 렌더링하는 기능 개발
### Details:
파싱된 마크다운 HTML을 DOM에 삽입하는 로직 구현, 렌더링 성능 최적화, 동적 컨텐츠 업데이트 처리, 렌더링 생명주기 관리

## 11. XSS 방지 보안 구현 [pending]
### Dependencies: 12.9, 12.10
### Description: 사용자 입력 및 마크다운 렌더링 과정에서 XSS 공격 방지 기능 구현
### Details:
HTML 이스케이프 처리, 안전한 HTML 태그 및 속성 화이트리스트 설정, DOMPurify 같은 보안 라이브러리 통합, 악성 스크립트 삽입 방지 테스트

## 12. 리치 텍스트 요소별 렌더링 구현 [pending]
### Dependencies: 12.10
### Description: 다양한 리치 텍스트 요소(표, 코드 블록, 수식 등)에 대한 특수 렌더링 구현
### Details:
코드 하이라이팅(Prism.js/highlight.js), 수학 수식(KaTeX/MathJax), 표 렌더링, 체크박스, 다이어그램(Mermaid) 등 특수 요소 지원, 각 요소별 스타일 및 인터랙션 구현

## 13. 일반 텍스트영역(textarea) 기반 입력/전송 UI 개발 [pending]
### Dependencies: None
### Description: 사용자가 메시지를 입력하고 전송할 수 있는 기본 UI 구현
### Details:
일반 HTML textarea 요소 구현, 전송 버튼 및 단축키 지원, 입력 유효성 검사, 기본적인 사용자 경험 최적화

## 14. CSS 스타일링 구현 [pending]
### Dependencies: 12.10, 12.12
### Description: 마크다운 렌더링 결과물에 대한 CSS 스타일링 및 테마 적용
### Details:
기본 마크다운 요소 스타일링, 반응형 디자인 적용, 다크/라이트 테마 지원, 커스텀 테마 옵션 구현, 일관된 디자인 시스템 적용, 접근성 고려한 스타일링

## 15. 스크롤/성능 최적화 [pending]
### Dependencies: 12.10, 12.14
### Description: 대량의 마크다운 렌더링 시 스크롤 및 성능 최적화 구현
### Details:
가상 스크롤링 구현, 지연 로딩, 대용량 마크다운 처리 최적화, 이미지 최적화, 렌더링 성능 측정 및 개선, 바닐라 JavaScript 기반 최적화 기법 적용

## 16. 테스트 구현 [pending]
### Dependencies: 12.9, 12.10, 12.11, 12.12, 12.13, 12.14, 12.15
### Description: 마크다운 파싱 및 렌더링 기능에 대한 단위/통합 테스트 작성
### Details:
파싱 정확도 테스트, XSS 방어 테스트, 렌더링 일관성 테스트, 성능 테스트, 브라우저 호환성 테스트, 에지 케이스 테스트, 자동화된 테스트 파이프라인 구축

## 17. 코드 주석화 및 문서화 [pending]
### Dependencies: 12.9, 12.10, 12.11, 12.12, 12.13, 12.14, 12.15, 12.16
### Description: 구현된 코드에 대한 주석 추가 및 사용 문서 작성
### Details:
코드 주석 추가, 바닐라 JavaScript 코드 문서화, README 작성, 사용 예제 작성, 확장 가이드 작성, 트러블슈팅 가이드 작성, 한글 주석 상세 작성

## 12.9. 전통적인 HTML/CSS/JavaScript 구조로 코드 구성 [pending]
### Dependencies: None
### Description: 
### Details:
React 없이 순수 JavaScript를 사용하여 DOM 조작 및 이벤트 처리 구현, 모듈 패턴 또는 클래스 기반 구조화

