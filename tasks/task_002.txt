# Task ID: 2
# Title: Qdrant Cloud 연동 및 벡터 DB 설정
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Qdrant Cloud 연동, `company_id` 기반 멀티테넌트 데이터 격리를 위한 컬렉션 구조 설계 및 핵심 CRUD 기능 구현. PRD 및 가이드라인 준수.
# Details:
- `qdrant-client` 패키지 설치 (`requirements.txt`에 버전 명시, 예: `qdrant-client==1.7.0`).
- Qdrant Cloud 연결 설정 (`QDRANT_URL`, `QDRANT_API_KEY` 환경변수 사용).
- **멀티테넌시 전략**: `company_id`를 각 포인트의 페이로드(payload)에 메타데이터 필드로 포함하여 논리적 데이터 분리. 컬렉션 이름은 `tickets`, `solutions`, `attachments_metadata` 등으로 단순화하고, 검색 시 `company_id` 필터링 필수 적용.
- **컬렉션 정의**:
  - `tickets`: 티켓 내용 임베딩 및 메타데이터 저장.
  - `solutions`: 솔루션/KB 문서 내용 임베딩 및 메타데이터 저장.
  - `attachments_metadata`: (필요시) 첨부파일 텍스트 내용 임베딩 및 메타데이터 저장.
- **벡터 설정**: OpenAI `text-embedding-3-small` 모델 기준 벡터 차원 (1536) 설정 및 거리 함수 (예: Cosine) 지정.
- **메타데이터 필드**: PRD 기반 필드(ticket_id, document_id, creation_date, status, category, file_name, file_type, company_id 등) 정의 및 인덱싱 설정.
- **핵심 기능 구현 (`core/vectordb.py` 또는 `data/qdrant_handler.py` 모듈 내):**
  - Qdrant 클라이언트 초기화 함수.
  - 필요한 컬렉션 자동 생성 (존재하지 않을 경우) 함수.
  - 데이터 삽입/업데이트 (upsert_points) 함수 (배치 처리 포함).
  - ID 기반 데이터 조회 (get_point) 함수.
  - 유사도 검색 (search_points) 함수: `company_id` 필터링 필수, 추가 메타데이터 필터링 옵션 제공.
- **에러 처리**: Qdrant 연결 오류, API 요청 실패 등에 대한 `try-except` 블록, 상세 로깅, 간단한 재시도 로직 구현.
- 모든 코드에 **한글 주석** 및 타입 힌트 적용.

# Test Strategy:
- Qdrant Cloud 연결 및 인증 성공 여부 테스트.
- 컬렉션 자동 생성 로직 검증 (미존재 시 생성, 존재 시 미생성).
- 데이터 삽입(upsert) 및 ID 기반 조회 정확성 테스트.
- `company_id` 필터링을 포함한 유사도 검색 결과의 정확성 및 격리성 검증 (타 `company_id` 데이터 미노출 확인).
- 다양한 메타데이터 필터링 조건 조합 테스트.
- Qdrant 연결 실패, 잘못된 API 키 등 주요 에러 상황에 대한 예외 처리 및 로깅 동작 검증.
- 벡터 차원(1536) 및 거리 함수 설정 확인.
