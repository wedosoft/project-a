#!/bin/bash

# 워크트리 통합 관리 도구
# 브랜치와 워크트리 생성/환경설정/병합/제거를 한 번에 처리

# 프로젝트 루트 경로
export PROJECT_A_ROOT="/Users/alan/GitHub/project-a"

# 색상 코드
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 도움말 출력
show_help() {
    echo -e "${BLUE}🛠️  워크트리 통합 관리 도구${NC}"
    echo ""
    echo "사용법:"
    echo "  $(basename $0) create <branch-name>    - 워크트리 생성 및 환경 설정"
    echo "  $(basename $0) list                    - 워크트리 목록 조회"
    echo "  $(basename $0) remove <branch-name>    - 워크트리 및 브랜치 제거"
    echo "  $(basename $0) goto <branch-name>      - 워크트리로 이동"
    echo "  $(basename $0) backend <branch-name>   - 백엔드로 이동하고 가상환경 활성화"
    echo "  $(basename $0) start                   - 백엔드 서버 시작"
    echo "  $(basename $0) merge <branch-name>     - 브랜치를 dev에 병합 후 제거"
    echo "  $(basename $0) setup-auto <branch-name> - 기존 워크트리에 자동 가상환경 설정"
    echo "  $(basename $0) setup-all               - 모든 기존 워크트리에 자동 가상환경 설정"
    echo ""
    echo "예시:"
    echo "  $(basename $0) create feature/admin"
    echo "  $(basename $0) backend feature/admin"
    echo "  $(basename $0) start"
    echo "  $(basename $0) merge feature/admin"
}

# 자동 가상환경 관리 설정 함수
setup_auto_venv_for_worktree() {
    local worktree_path="$1"
    local backend_path="$worktree_path/backend"
    local func_name="worktree_auto_venv_$(echo "$worktree_path" | sed 's/[^a-zA-Z0-9]/_/g')"
    
    echo -e "${YELLOW}🔧 자동 가상환경 관리 설정 중...${NC}"
    
    # 이미 설정되어 있는지 확인
    if grep -q "# 워크트리 자동 가상환경 관리 ($worktree_path)" ~/.zshrc 2>/dev/null; then
        echo -e "${YELLOW}⚠️ 이미 설정되어 있습니다. 업데이트 중...${NC}"
        # 기존 설정 제거 (해당 워크트리 관련 부분만)
        sed -i '' "/# 워크트리 자동 가상환경 관리 ($worktree_path | sed 's/[\/.*[\]^$()+?{}|]/\\&/g')/,/^$/d" ~/.zshrc 2>/dev/null || true
    fi
    
    # .zshrc에 새로운 함수 추가
    cat >> ~/.zshrc << EOF

# 워크트리 자동 가상환경 관리 ($worktree_path)
$func_name() {
    if [[ "\$PWD" == "$backend_path" ]]; then
        if [[ -f "$backend_path/venv/bin/activate" && -z "\$VIRTUAL_ENV" ]]; then
            source "$backend_path/venv/bin/activate"
            echo "🐍 가상환경이 자동 활성화되었습니다."
        fi
    elif [[ "\$VIRTUAL_ENV" == "$backend_path/venv" && "\$PWD" != "$backend_path"* ]]; then
        deactivate 2>/dev/null || true
        echo "🔴 가상환경이 비활성화되었습니다."
    fi
}

# chpwd 훅에 함수 추가 (zsh)
if [[ -n "\$ZSH_VERSION" ]]; then
    autoload -U add-zsh-hook
    add-zsh-hook chpwd $func_name
fi
EOF

    echo -e "${GREEN}✅ 자동 가상환경 관리가 설정되었습니다.${NC}"
    
    # 현재 세션에 즉시 적용
    echo -e "${YELLOW}🔄 현재 터미널에 설정 적용 중...${NC}"
    
    # 생성된 함수를 현재 세션에서 정의
    eval "$func_name() {
        if [[ \"\$PWD\" == \"$backend_path\" ]]; then
            if [[ -f \"$backend_path/venv/bin/activate\" && -z \"\$VIRTUAL_ENV\" ]]; then
                source \"$backend_path/venv/bin/activate\"
                echo \"🐍 가상환경이 자동 활성화되었습니다.\"
            fi
        elif [[ \"\$VIRTUAL_ENV\" == \"$backend_path/venv\" && \"\$PWD\" != \"$backend_path\"* ]]; then
            deactivate 2>/dev/null || true
            echo \"🔴 가상환경이 비활성화되었습니다.\"
        fi
    }"
    
    # zsh의 chpwd 훅에 즉시 추가
    if [[ -n "$ZSH_VERSION" ]]; then
        autoload -U add-zsh-hook 2>/dev/null || true
        # 중복 추가 방지
        if ! add-zsh-hook -L chpwd | grep -q "$func_name" 2>/dev/null; then
            add-zsh-hook chpwd $func_name 2>/dev/null || true
        fi
        echo -e "${GREEN}✅ 현재 터미널에서 즉시 사용 가능합니다!${NC}"
    else
        echo -e "${YELLOW}📝 새 터미널을 열거나 'source ~/.zshrc'를 실행하면 적용됩니다.${NC}"
    fi
}

# 워크트리 생성 및 환경 설정
create_worktree() {
    local branch_name="$1"
    
    if [ -z "$branch_name" ]; then
        echo -e "${RED}❌ 브랜치 이름을 입력해주세요.${NC}"
        echo "사용법: $(basename $0) create <branch-name>"
        exit 1
    fi
    
    local folder_name=$(echo "$branch_name" | sed 's/\//-/g')
    local worktree_path="/Users/alan/GitHub/project-a-$folder_name"
    
    echo -e "${BLUE}🚀 워크트리 생성 중: $branch_name${NC}"
    
    # 프로젝트 루트로 이동
    cd "$PROJECT_A_ROOT" || exit 1
    
    # 새 브랜치 생성 (dev에서)
    echo -e "${YELLOW}📋 dev 브랜치에서 새 브랜치 생성 중...${NC}"
    git checkout dev
    git pull origin dev
    git checkout -b "$branch_name"
    git checkout dev
    
    # 워크트리 생성
    echo -e "${YELLOW}📁 워크트리 생성 중: $worktree_path${NC}"
    git worktree add "$worktree_path" "$branch_name"
    
    # .env 파일 복사
    echo -e "${YELLOW}📄 .env 파일 복사 중...${NC}"
    if [ -f "$PROJECT_A_ROOT/backend/.env" ]; then
        cp "$PROJECT_A_ROOT/backend/.env" "$worktree_path/backend/.env"
        echo -e "${GREEN}✅ .env 파일이 복사되었습니다.${NC}"
    else
        echo -e "${YELLOW}⚠️ .env 파일이 없습니다.${NC}"
    fi
    
    # 가상환경 생성
    echo -e "${YELLOW}🐍 가상환경 생성 중...${NC}"
    cd "$worktree_path/backend"
    python3 -m venv venv
    source venv/bin/activate
    
    # requirements.txt가 있으면 패키지 설치
    if [ -f "requirements.txt" ]; then
        echo -e "${YELLOW}📦 패키지 설치 중...${NC}"
        pip install -r requirements.txt
    fi
    
    # 자동 가상환경 관리 설정
    setup_auto_venv_for_worktree "$worktree_path"
    
    echo -e "${GREEN}🎉 워크트리 생성 완료!${NC}"
    echo -e "${BLUE}📍 경로: $worktree_path${NC}"
    echo -e "${BLUE}🌿 브랜치: $branch_name${NC}"
    echo ""
    echo -e "${GREEN}✨ 자동 가상환경이 설정되었습니다!${NC}"
    echo "이제 backend 폴더로 이동하면 자동으로 가상환경이 활성화됩니다:"
    echo ""
    echo -e "${YELLOW}  cd $worktree_path/backend${NC}"
    echo -e "${YELLOW}  # 🐍 가상환경이 자동 활성화됩니다${NC}"
    echo ""
    echo "또는 다음 명령어를 사용하세요:"
    echo "  $(basename $0) backend $branch_name"
    echo "  $(basename $0) start"
}

# 워크트리 목록 조회
list_worktrees() {
    echo -e "${BLUE}📋 워크트리 목록${NC}"
    cd "$PROJECT_A_ROOT"
    git worktree list
}

# 워크트리 및 브랜치 제거
remove_worktree() {
    local branch_name="$1"
    
    if [ -z "$branch_name" ]; then
        echo -e "${RED}❌ 브랜치 이름을 입력해주세요.${NC}"
        echo "사용법: $(basename $0) remove <branch-name>"
        exit 1
    fi
    
    local folder_name=$(echo "$branch_name" | sed 's/\//-/g')
    local worktree_path="/Users/alan/GitHub/project-a-$folder_name"
    
    echo -e "${YELLOW}🗑️ 워크트리 제거 중: $worktree_path${NC}"
    
    cd "$PROJECT_A_ROOT"
    
    # 워크트리 제거
    if [ -d "$worktree_path" ]; then
        git worktree remove "$worktree_path" --force
        echo -e "${GREEN}✅ 워크트리가 제거되었습니다.${NC}"
    else
        echo -e "${YELLOW}⚠️ 워크트리가 존재하지 않습니다: $worktree_path${NC}"
    fi
    
    # 브랜치 제거
    git branch -D "$branch_name" 2>/dev/null || echo -e "${YELLOW}⚠️ 로컬 브랜치가 이미 제거되었거나 존재하지 않습니다.${NC}"
    
    echo -e "${GREEN}🎉 정리 완료!${NC}"
}

# 워크트리로 이동
goto_worktree() {
    local branch_name="$1"
    
    if [ -z "$branch_name" ]; then
        echo -e "${RED}❌ 브랜치 이름을 입력해주세요.${NC}"
        echo "사용법: $(basename $0) goto <branch-name>"
        exit 1
    fi
    
    local folder_name=$(echo "$branch_name" | sed 's/\//-/g')
    local worktree_path="/Users/alan/GitHub/project-a-$folder_name"
    
    if [ -d "$worktree_path" ]; then
        cd "$worktree_path"
        echo -e "${GREEN}📍 워크트리로 이동했습니다: $worktree_path${NC}"
    else
        echo -e "${RED}❌ 워크트리가 존재하지 않습니다: $worktree_path${NC}"
        exit 1
    fi
}

# 백엔드로 이동하고 가상환경 활성화
goto_backend() {
    local branch_name="$1"
    
    if [ -z "$branch_name" ]; then
        echo -e "${RED}❌ 브랜치 이름을 입력해주세요.${NC}"
        echo "사용법: $(basename $0) backend <branch-name>"
        exit 1
    fi
    
    local folder_name=$(echo "$branch_name" | sed 's/\//-/g')
    local backend_path="/Users/alan/GitHub/project-a-$folder_name/backend"
    
    if [ -d "$backend_path" ]; then
        cd "$backend_path"
        if [ -f "venv/bin/activate" ]; then
            source venv/bin/activate
            echo -e "${GREEN}🐍 백엔드로 이동하고 가상환경을 활성화했습니다: $backend_path${NC}"
        else
            echo -e "${YELLOW}⚠️ 가상환경이 없습니다. 다시 생성해주세요.${NC}"
        fi
    else
        echo -e "${RED}❌ 백엔드 폴더가 존재하지 않습니다: $backend_path${NC}"
        exit 1
    fi
}

# 백엔드 서버 시작
start_server() {
    # 현재 디렉토리가 backend 폴더인지 확인
    if [[ $(basename "$PWD") != "backend" ]]; then
        echo -e "${RED}❌ backend 폴더에서 실행해주세요.${NC}"
        echo "사용법: $(basename $0) backend <branch-name> 으로 이동 후 $(basename $0) start 실행"
        exit 1
    fi
    
    # 가상환경이 활성화되어 있는지 확인
    if [[ -z "$VIRTUAL_ENV" ]]; then
        echo -e "${YELLOW}⚠️ 가상환경이 활성화되지 않았습니다. 가상환경을 활성화합니다...${NC}"
        if [ -f "venv/bin/activate" ]; then
            source venv/bin/activate
        else
            echo -e "${RED}❌ 가상환경이 없습니다. 워크트리를 다시 생성해주세요.${NC}"
            exit 1
        fi
    fi
    
    echo -e "${GREEN}🚀 백엔드 서버를 시작합니다...${NC}"
    uvicorn api.main:app --reload --host 0.0.0.0 --port 8000
}

# 기존 워크트리에 자동 가상환경 설정 추가
setup_auto_venv() {
    local branch_name="$1"
    
    if [ -z "$branch_name" ]; then
        echo -e "${RED}❌ 브랜치 이름을 입력해주세요.${NC}"
        echo "사용법: $(basename $0) setup-auto <branch-name>"
        exit 1
    fi
    
    local folder_name=$(echo "$branch_name" | sed 's/\//-/g')
    local worktree_path="/Users/alan/GitHub/project-a-$folder_name"
    local backend_path="$worktree_path/backend"
    
    if [ ! -d "$backend_path" ]; then
        echo -e "${RED}❌ 워크트리가 존재하지 않습니다: $worktree_path${NC}"
        exit 1
    fi
    
    if [ ! -f "$backend_path/venv/bin/activate" ]; then
        echo -e "${RED}❌ 가상환경이 없습니다. 먼저 가상환경을 생성해주세요.${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}🔧 $branch_name 워크트리에 자동 가상환경 설정 중...${NC}"
    setup_auto_venv_for_worktree "$worktree_path"
    echo -e "${GREEN}✅ 설정 완료!${NC}"
}

# 모든 기존 워크트리에 자동 가상환경 설정
setup_all_auto_venv() {
    echo -e "${BLUE}🔧 모든 워크트리에 자동 가상환경 설정 중...${NC}"
    
    cd "$PROJECT_A_ROOT"
    
    # 워크트리 목록 가져오기 (메인 워크트리 제외)
    local worktrees=$(git worktree list | grep -v "$(pwd)" | awk '{print $1}')
    
    if [ -z "$worktrees" ]; then
        echo -e "${YELLOW}⚠️ 추가 워크트리가 없습니다.${NC}"
        return
    fi
    
    local count=0
    local success=0
    
    for worktree_path in $worktrees; do
        count=$((count + 1))
        local backend_path="$worktree_path/backend"
        
        echo -e "${YELLOW}[$count] $worktree_path 처리 중...${NC}"
        
        if [ ! -d "$backend_path" ]; then
            echo -e "${RED}  ❌ backend 폴더가 없습니다.${NC}"
            continue
        fi
        
        if [ ! -f "$backend_path/venv/bin/activate" ]; then
            echo -e "${RED}  ❌ 가상환경이 없습니다.${NC}"
            continue
        fi
        
        setup_auto_venv_for_worktree "$worktree_path"
        success=$((success + 1))
        echo -e "${GREEN}  ✅ 설정 완료${NC}"
        echo ""
    done
    
    echo -e "${GREEN}🎉 전체 결과: $success/$count 워크트리 설정 완료!${NC}"
    
    if [ $success -gt 0 ]; then
        echo -e "${YELLOW}📝 새 터미널을 열거나 현재 터미널에서 다시 워크트리로 이동하면 자동 가상환경이 작동합니다.${NC}"
    fi
}

# 브랜치를 dev에 병합 후 제거
merge_and_cleanup() {
    local branch_name="$1"
    
    if [ -z "$branch_name" ]; then
        echo -e "${RED}❌ 브랜치 이름을 입력해주세요.${NC}"
        echo "사용법: $(basename $0) merge <branch-name>"
        exit 1
    fi
    
    echo -e "${BLUE}🔄 브랜치 병합 및 정리 시작: $branch_name${NC}"
    
    cd "$PROJECT_A_ROOT"
    
    # dev 브랜치로 전환하고 최신 상태로 업데이트
    echo -e "${YELLOW}📋 dev 브랜치로 전환 중...${NC}"
    git checkout dev
    git pull origin dev
    
    # 브랜치 병합
    echo -e "${YELLOW}🔄 브랜치 병합 중...${NC}"
    git merge "$branch_name" --no-ff -m "feat: Merge $branch_name into dev"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ 병합 완료!${NC}"
        
        # 원격에 푸시
        echo -e "${YELLOW}📤 dev 브랜치를 원격에 푸시 중...${NC}"
        git push origin dev
        
        # 워크트리와 브랜치 제거
        echo -e "${YELLOW}🗑️ 워크트리와 브랜치 정리 중...${NC}"
        remove_worktree "$branch_name"
        
        echo -e "${GREEN}🎉 모든 작업이 완료되었습니다!${NC}"
    else
        echo -e "${RED}❌ 병합 중 충돌이 발생했습니다. 수동으로 해결해주세요.${NC}"
        exit 1
    fi
}

# 메인 로직
case "$1" in
    "create")
        create_worktree "$2"
        ;;
    "list")
        list_worktrees
        ;;
    "remove")
        remove_worktree "$2"
        ;;
    "goto")
        goto_worktree "$2"
        ;;
    "backend")
        goto_backend "$2"
        ;;
    "start")
        start_server
        ;;
    "merge")
        merge_and_cleanup "$2"
        ;;
    "setup-auto")
        setup_auto_venv "$2"
        ;;
    "setup-all")
        setup_all_auto_venv
        ;;
    *)
        show_help
        ;;
esac
