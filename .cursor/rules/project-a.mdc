---
description: 
globs: 
alwaysApply: true
---
# AI Freshdesk Assistant MVP Project Rules (for Cursor)

## Project Overview

This project aims to build an MVP AI assistant integrated with Freshdesk. It will use RAG (Retrieval-Augmented Generation) with VectorDB and commercial LLM APIs to provide better ticket response and knowledge search suggestions via a custom Freshdesk app (Prompt Canvas based editor).

## Architecture

* Freshdesk API → Python backend (FastAPI) → VectorDB (Chroma + SQLite) → LLM API (OpenAI / Claude) → Freshdesk Custom App (React + BlockNote)

## Backend Rules (Python + FastAPI)

* Use FastAPI for the backend API server
* Use Langchain or simple custom RAG logic
* Use OpenAI / Claude API for LLM calls
* Use Chroma + SQLite for VectorDB
* Follow PEP8 style (auto-format using black)
* Use async/await whenever possible
* Separate routes, services, and utilities into clear modules

## Frontend Rules (React + Freshdesk SDK)

* Use React functional components only (Hooks, no class components)
* Use BlockNote for Prompt Canvas implementation
* Use Freshdesk Custom App SDK for integration
* AI responses should be displayed as editable blocks
* UI can be minimal (MVP quality is enough)

## RAG Workflow Rules

* User asks -> Embed -> Vector search -> Retrieve context -> LLM generate -> AI response
* Focus on simple MVP implementation, no overengineering

## DevOps & Deployment

* Use docker-compose for backend and Chroma during development
* Use Freshdesk Developer Kit (FDK) for Custom App local testing
* Production deployment is NOT the focus (MVP only)

## AI Tone and Prompt

* Assume the user is a Freshdesk agent
* AI responses should be friendly but not overly casual
* Prompt engineering should be clear and focused on ticket/knowledge answering

## General Guidelines

* Keep everything clean and modular for easy expansion after MVP
* MVP must validate functionality and usability first
* Avoid adding unnecessary complexity at this stage
