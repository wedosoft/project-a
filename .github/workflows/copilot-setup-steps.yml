name: "Copilot Setup Steps"

on:
  workflow_dispatch:

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
    env:
      # 주요 환경변수는 GitHub Secrets로 관리 (예시)
      FRESHDESK_DOMAIN: ${{ secrets.FRESHDESK_DOMAIN }}
      FRESHDESK_API_KEY: ${{ secrets.FRESHDESK_API_KEY }}
      QDRANT_URL: ${{ secrets.QDRANT_URL }}
      QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      COMPANY_ID: kyexpert
      PROCESS_ATTACHMENTS: true
      EMBEDDING_MODEL: text-embedding-3-small
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Node.js(FDK/프론트) 환경 지원: .nvmrc 기반 버전 적용
      - name: Set up Node.js (with .nvmrc)
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: "npm"

      - name: Install Node.js dependencies (if package.json exists)
        run: |
          if [ -f package.json ]; then npm ci; fi

      # Python 3.10 환경 세팅 및 의존성 설치
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r backend/requirements.txt

      # 코드 품질 자동화: Black 포매팅, flake8 린트, pytest 테스트
      - name: Format Python code (Black)
        run: |
          pip install black
          cd backend && black . --line-length 100

      - name: Lint Python code (flake8)
        run: |
          pip install flake8
          cd backend && flake8 . --max-line-length=100

      - name: Run Python tests (pytest)
        run: |
          pip install pytest
          cd backend && pytest tests/ -v

      # (선택) Docker Compose로 전체 서비스 구동 테스트
      - name: Docker Compose Up (optional)
        run: |
          cd backend && docker-compose up -d
        if: false # 필요 시 true로 변경

      # 워크플로 설명 주석
      # - Node.js 및 Python 환경을 모두 지원하며, 주요 환경변수는 secrets로 관리합니다.
      # - 코드 품질 자동화(포매팅, 린트, 테스트) 단계를 포함합니다.
      # - Qdrant 서비스는 actions 서비스로 구동합니다.
      # - 필요에 따라 Docker Compose 전체 구동도 테스트할 수 있습니다.
