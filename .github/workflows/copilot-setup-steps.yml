# GitHub Copilot Setup Steps for Freshdesk Custom App Backend
name: "Copilot Setup Steps"

# Allow testing of the setup steps from your repository's "Actions" tab.
on: workflow_dispatch

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Repository Secrets 사용 (간단한 설정)
    # environment: copilot  # Environment Secrets 대신 Repository Secrets 사용

    # Set the permissions to the lowest permissions possible needed for your steps.
    permissions:
      contents: read
      actions: read

    # 환경변수를 Repository Secrets에서 직접 설정
    env:
      FRESHDESK_DOMAIN: ${{ secrets.FRESHDESK_DOMAIN }}
      FRESHDESK_API_KEY: ${{ secrets.FRESHDESK_API_KEY }}
      QDRANT_URL: ${{ secrets.QDRANT_URL }}
      QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

    # You can define any steps you want, and they will run before the agent starts.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Copilot Agent 방화벽 비활성화
      - name: Disable Copilot Agent Firewall
        run: |
          echo "COPILOT_AGENT_FIREWALL_ENABLED=false" >> $GITHUB_ENV
          nslookup openaipublic.blob.core.windows.net || true
          curl -I https://openaipublic.blob.core.windows.net/encodings/cl100k_base.tiktoken || true
          echo "🔓 Copilot Agent 방화벽 및 네트워크 제한 비활성화 완료"

      - name: Debug Secrets Availability
        run: |
          echo "=== Secrets Debug ==="
          echo "Number of secrets passed: ${{ secrets }}"
          echo "Checking if secrets context is available..."
          if [ -n "${{ secrets.FRESHDESK_API_KEY }}" ]; then
            echo "FRESHDESK_API_KEY secret is available"
          else
            echo "FRESHDESK_API_KEY secret is NOT available"
          fi
          echo "====================="

      - name: Check Environment Variables (Masked)
        run: |
          echo "=== Environment Variable Check ==="

          for var in \
            FRESHDESK_API_KEY \
            FRESHDESK_DOMAIN \
            QDRANT_URL \
            QDRANT_API_KEY \
            ANTHROPIC_API_KEY \
            OPENAI_API_KEY \
            GOOGLE_API_KEY
          do
            if [ -z "${!var}" ]; then
              echo "$var is NOT set"
            else
              echo "$var is set. Length: ${#var}"
            fi
          done

          echo "==============================="

      # Python 3.10 설정
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: "backend/requirements.txt"

      # Node.js 22 설정
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      # Python 의존성 설치
      - name: Install Python dependencies
        shell: bash
        run: |
          pip install --upgrade pip
          export PIP_TRUSTED_HOST="pypi.org files.pythonhosted.org pypi.python.org"
          export PIP_DISABLE_PIP_VERSION_CHECK=1
          export PYTHONHTTPSVERIFY=0

          if [ -f "backend/requirements.txt" ]; then
            echo "Installing from requirements.txt with network optimization..."
            pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org -r backend/requirements.txt
          else
            echo "requirements.txt not found, installing basic dependencies"
            pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org fastapi uvicorn pydantic httpx asyncio
          fi

      # 개발 도구 설치
      - name: Install development tools
        shell: bash
        run: |
          pip install black flake8 pytest pytest-asyncio mypy
          npm install -g @modelcontextprotocol/server-github || echo "MCP GitHub server install failed"
          npm install -g @modelcontextprotocol/server-filesystem || echo "MCP filesystem server install failed"

      # 프로젝트 디렉토리 구조 생성
      - name: Create project directories
        shell: bash
        run: |
          mkdir -p backend/{data,logs,attachment_cache}
          mkdir -p .vscode
          mkdir -p .github/{workflows,ISSUE_TEMPLATE}

      # 환경변수 확인 (Repository Secrets 사용)
      - name: Check environment variables
        shell: bash
        run: |
          echo "=== 환경변수 확인 ==="

          # 필수 환경변수 목록
          required_vars=(
            "FRESHDESK_DOMAIN"
            "FRESHDESK_API_KEY" 
            "QDRANT_URL"
            "QDRANT_API_KEY"
            "ANTHROPIC_API_KEY"
            "OPENAI_API_KEY"
            "GOOGLE_API_KEY"
          )

          # 각 환경변수의 설정 상태 확인
          missing_count=0
          for var in "${required_vars[@]}"; do
            if [ -n "${!var}" ]; then
              echo "✅ $var: [설정됨, 길이: ${#!var}자]"
            else
              echo "❌ $var: [설정되지 않음]"
              ((missing_count++))
            fi
          done

          echo "=== 결과 요약 ==="
          echo "총 ${#required_vars[@]}개 환경변수 중 $((${#required_vars[@]} - missing_count))개 설정됨"

          if [ $missing_count -eq 0 ]; then
            echo "✅ 모든 환경변수가 정상적으로 설정되었습니다"
          else
            echo "⚠️ $missing_count 개의 환경변수가 누락되었습니다"
            echo "GitHub Repository > Settings > Secrets and variables > Actions 에서 확인하세요"
          fi

      # Docker 환경 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 프로젝트 구조 검증
      - name: Validate project structure
        shell: bash
        run: |
          echo "=== 프로젝트 구조 검증 ==="

          # 필수 파일 목록
          required_files=(
            "backend/api/main.py"
            "backend/core/llm_router.py"
            "backend/core/vectordb.py"
            "backend/freshdesk/fetcher.py"
            "backend/requirements.txt"
          )

          missing_required=false
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✓ $file exists"
            else
              echo "✗ $file missing (REQUIRED)"
              missing_required=true
            fi
          done

          if [ "$missing_required" = false ]; then
            echo "✅ 모든 필수 파일이 존재합니다"
          else
            echo "⚠️ 일부 필수 파일이 누락되었습니다"
          fi

      # Python 환경 테스트
      - name: Test Python environment
        shell: bash
        run: |
          echo "=== Python 환경 테스트 ==="

          cd backend

          # Python 버전 확인
          python -c "import sys; print(f'Python version: {sys.version}')"

          # 기본 의존성 테스트
          echo "Testing basic imports..."
          python -c "import fastapi; print('✓ FastAPI available')" || echo "✗ FastAPI import failed"
          python -c "import pydantic; print('✓ Pydantic available')" || echo "✗ Pydantic import failed"
          python -c "import httpx; print('✓ HTTPX available')" || echo "✗ HTTPX import failed"

          # 프로젝트 모듈 구문 검사
          echo "Checking Python syntax..."
          find . -name "*.py" -exec python -m py_compile {} \; || echo "Some Python files have syntax errors"

      # 환경 정보 요약
      - name: Display environment summary
        shell: bash
        run: |
          echo "=== 환경 설정 완료 ==="
          echo "프로젝트: Freshdesk Custom App Backend"
          echo "아키텍처: RAG 기반 AI 어시스턴트"
          echo "기술 스택: Python 3.10 + FastAPI + Qdrant + Multi-LLM"
          echo ""
          echo "주요 컴포넌트:"
          echo "  - FastAPI 비동기 웹 서버"
          echo "  - Qdrant 벡터 데이터베이스 연동"
          echo "  - Multi-LLM 라우터 (Claude, GPT, Gemini)"
          echo "  - Freshdesk API 커넥터"
          echo "  - BlockNote 에디터 통합"
          echo ""
          echo "환경변수는 GitHub Repository Secrets에서 자동으로 제공됩니다"
          echo "🎉 GitHub Copilot Agent 환경 준비 완료!"

      # 최종 환경변수 테스트
      - name: Final environment test
        shell: bash
        run: |
          echo "=== 최종 환경변수 테스트 ==="

          cd backend

          python -c "
          import os

          # 환경변수 최종 확인
          vars_to_check = [
              'FRESHDESK_DOMAIN', 'FRESHDESK_API_KEY',
              'QDRANT_URL', 'QDRANT_API_KEY', 
              'ANTHROPIC_API_KEY', 'OPENAI_API_KEY', 'GOOGLE_API_KEY'
          ]

          available_vars = []
          missing_vars = []

          for var in vars_to_check:
              value = os.getenv(var)
              if value:
                  available_vars.append(var)
                  print(f'✓ {var}: Available')
              else:
                  missing_vars.append(var)
                  print(f'✗ {var}: Missing')

          print(f'\\n📊 환경변수 상태: {len(available_vars)}/{len(vars_to_check)} 설정됨')

          if len(available_vars) > 0:
              print('✅ 일부 환경변수가 사용 가능합니다')
          else:
              print('⚠️ 모든 환경변수가 누락되었습니다')
              print('GitHub Repository Secrets 설정을 확인하세요')
          " || echo "환경변수 테스트 완료"
