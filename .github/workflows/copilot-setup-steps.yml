# GitHub Copilot Setup Steps for Freshdesk Custom App Backend
name: "Copilot Setup Steps"

# Allow testing of the setup steps from your repository's "Actions" tab.
on: workflow_dispatch

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

      # GitHub Environment Secrets를 환경변수로 노출
    env:
      FRESHDESK_DOMAIN: ${{ secrets.FRESHDESK_DOMAIN }}
      FRESHDESK_API_KEY: ${{ secrets.FRESHDESK_API_KEY }}
      QDRANT_URL: ${{ secrets.QDRANT_URL }}
      QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Copilot Agent 방화벽 비활성화
      - name: Disable Copilot Agent Firewall
        run: |
          echo "COPILOT_AGENT_FIREWALL_ENABLED=false" >> $GITHUB_ENV
            nslookup openaipublic.blob.core.windows.net || true
            curl -I https://openaipublic.blob.core.windows.net/encodings/cl100k_base.tiktoken || true
            echo "🔓 Copilot Agent 방화벽 및 네트워크 제한 비활성화 완료"

      - name: Check Environment Variables (Masked)
        run: |
          echo "=== Environment Variable Check ==="

          for var in \
            FRESHDESK_API_KEY \
            FRESHDESK_DOMAIN \
            QDRANT_URL \
            QDRANT_API_KEY \
            ANTHROPIC_API_KEY \
            OPENAI_API_KEY \
            GOOGLE_API_KEY
          do
            if [ -z "${!var}" ]; then
              echo "$var is NOT set"
            else
              echo "$var is set. Length: ${#var}"
            fi
          done

          echo "==============================="

      # Python 3.10 설정 (백엔드 개발 환경)
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: "backend/requirements.txt"

      # Node.js 20 설정 (프론트엔드 및 도구용)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          # 현재 프로젝트에 package.json이 없어서 캐시 비활성화
          # cache: "npm"

      # Python 의존성 설치
      - name: Install Python dependencies
        shell: bash
        run: |
          pip install --upgrade pip
          if [ -f "backend/requirements.txt" ]; then
            pip install -r backend/requirements.txt
          else
            echo "requirements.txt not found, installing basic dependencies"
            pip install fastapi uvicorn pydantic httpx asyncio
          fi
        working-directory: ./

      # 개발 도구 설치 (포맷팅, 린팅)
      - name: Install development tools
        shell: bash
        run: |
          pip install black flake8 pytest pytest-asyncio mypy
          # MCP 서버 설치 (선택적)
          npm install -g @modelcontextprotocol/server-github || echo "MCP GitHub server install failed"
          npm install -g @modelcontextprotocol/server-filesystem || echo "MCP filesystem server install failed"

      # 프로젝트 디렉토리 구조 생성
      - name: Create project directories
        shell: bash
        run: |
          mkdir -p backend/{data,logs,attachment_cache}
          mkdir -p .vscode
          mkdir -p .github/{workflows,ISSUE_TEMPLATE}

      # Docker 환경 설정 및 확인 (공식 GitHub Actions 사용)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify Docker Compose availability
        shell: bash
        run: |
          echo "Checking Docker Compose availability..."
          # GitHub Actions runner에는 이미 Docker Compose가 설치되어 있음
          echo "Docker Compose is pre-installed in GitHub Actions runners"

      - name: Verify Docker environment
        shell: bash
        run: |
          echo "Checking Docker availability..."
          docker --version || echo "Docker not available"
          docker-compose --version || docker compose version || echo "Docker Compose not available"

          # docker-compose.yml 존재 확인
          if [ -f "backend/docker-compose.yml" ]; then
            echo "✓ backend/docker-compose.yml found"
            cd backend
            if command -v docker-compose >/dev/null 2>&1; then
              docker-compose config || echo "Docker compose configuration validation failed"
            elif command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
              docker compose config || echo "Docker compose configuration validation failed"
            else
              echo "Docker Compose not available for validation"
            fi
          else
            echo "✗ backend/docker-compose.yml not found"
          fi

      # 프로젝트 구조 검증
      - name: Validate project structure
        shell: bash
        run: |
          echo "=== Validating Project Structure ==="

          # 필수 파일 목록
          required_files=(
            "backend/api/main.py"
            "backend/core/llm_router.py"
            "backend/core/vectordb.py"
            "backend/freshdesk/fetcher.py"
            "backend/requirements.txt"
          )

          optional_files=(
            "backend/docker-compose.yml"
            "PROJECT_RULES.md"
            ".github/copilot-instructions.md"
            ".vscode/settings.json"
          )

          echo "Checking required files..."
          missing_required=false
          for file in "${required_files[@]}"
          do
            if [ -f "$file" ]; then
              echo "✓ $file exists"
            else
              echo "✗ $file missing (REQUIRED)"
              missing_required=true
            fi
          done

          echo "Checking optional files..."
          for file in "${optional_files[@]}"
          do
            if [ -f "$file" ]; then
              echo "✓ $file exists"
            else
              echo "○ $file missing (optional)"
            fi
          done

          # 디렉토리 구조 확인
          echo "Project directory structure:"
          find . -type d -name ".*" -prune -o -type d -print | head -20

      # Python 모듈 임포트 테스트
      - name: Test Python imports and syntax
        shell: bash
        run: |
          echo "=== Testing Python Environment ==="

          cd backend

          # Python 버전 확인
          python -c "import sys; print(f'Python version: {sys.version}')"

          # 기본 의존성 테스트
          echo "Testing FastAPI import..."
          python -c "import fastapi; print('✓ FastAPI imported successfully')" || echo "✗ FastAPI import failed"

          echo "Testing Pydantic import..."
          python -c "import pydantic; print('✓ Pydantic imported successfully')" || echo "✗ Pydantic import failed"

          echo "Testing HTTPX import..."
          python -c "import httpx; print('✓ HTTPX imported successfully')" || echo "✗ HTTPX import failed"

          # 프로젝트 모듈 구문 검사
          echo "Checking Python syntax for project files..."
          find . -name "*.py" -exec python -m py_compile {} \; || echo "Some Python files have syntax errors"

      # 환경 정보 및 컨텍스트 출력
      - name: Display environment info and project context
        shell: bash
        run: |
          echo "=== Environment Information ==="
          echo "Python version: $(python --version)"
          echo "Node.js version: $(node --version 2>/dev/null || echo 'Not available')"
          echo "Docker version: $(docker --version 2>/dev/null || echo 'Not available')"
          echo "Working directory: $(pwd)"
          echo "Python executable: $(which python)"

          echo "=== Installed Python Packages ==="
          pip list 2>/dev/null | head -30 || echo "Package list unavailable"

          echo "=== Project Context ==="
          echo "Project Name: Freshdesk Custom App Backend"
          echo "Architecture: RAG-based AI Assistant"
          echo "Tech Stack: Python 3.10 + FastAPI + Qdrant + Multi-LLM"
          echo "Key Components:"
          echo "  - FastAPI async web server"
          echo "  - Qdrant vector database integration"
          echo "  - Multi-LLM router (Claude, GPT, Gemini)"
          echo "  - Freshdesk API connector"
          echo "  - BlockNote editor integration"

          echo "=== Copilot Agent Context ==="
          echo "This environment is configured for GitHub Copilot coding agent"
          echo "Copilot instructions available at: .github/copilot-instructions.md"
          echo "Project coding guidelines configured for:"
          echo "  - Async/await patterns"
          echo "  - Type hints and Pydantic models" 
          echo "  - Structured logging and error handling"
          echo "  - Multi-tenant data isolation"
          echo "  - Performance-optimized vector operations"

          echo "=== Setup Complete ==="
          echo "Environment is ready for Copilot coding agent operations"
